
RTOS_lab001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000195c  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001a8c  08001a8c  00011a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ab4  08001ab4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001ab4  08001ab4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ab4  08001ab4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ab4  08001ab4  00011ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ab8  08001ab8  00011ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000214c  20000008  08001ac4  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002154  08001ac4  00022154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003836  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000db8  00000000  00000000  00023867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000440  00000000  00000000  00024620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000398  00000000  00000000  00024a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000d9b  00000000  00000000  00024df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004361  00000000  00000000  00025b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000f756  00000000  00000000  00029ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003964a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f40  00000000  00000000  0003969c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08001a74 	.word	0x08001a74

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08001a74 	.word	0x08001a74

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001d0:	683b      	ldr	r3, [r7, #0]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001dc:	d103      	bne.n	80001e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e00c      	b.n	8000200 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3308      	adds	r3, #8
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e002      	b.n	80001f4 <vListInsert+0x2e>
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d2f6      	bcs.n	80001ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	1c5a      	adds	r2, r3, #1
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000236:	b480      	push	{r7}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	6892      	ldr	r2, [r2, #8]
 800024c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	6852      	ldr	r2, [r2, #4]
 8000256:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d103      	bne.n	800026a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000288:	b580      	push	{r7, lr}
 800028a:	b08c      	sub	sp, #48	; 0x30
 800028c:	af04      	add	r7, sp, #16
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	4613      	mov	r3, r2
 8000296:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000298:	88fb      	ldrh	r3, [r7, #6]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	4618      	mov	r0, r3
 800029e:	f000 ff27 	bl	80010f0 <pvPortMalloc>
 80002a2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d013      	beq.n	80002d2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80002aa:	2058      	movs	r0, #88	; 0x58
 80002ac:	f000 ff20 	bl	80010f0 <pvPortMalloc>
 80002b0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d008      	beq.n	80002ca <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80002b8:	2258      	movs	r2, #88	; 0x58
 80002ba:	2100      	movs	r1, #0
 80002bc:	69f8      	ldr	r0, [r7, #28]
 80002be:	f001 fbd1 	bl	8001a64 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	697a      	ldr	r2, [r7, #20]
 80002c6:	631a      	str	r2, [r3, #48]	; 0x30
 80002c8:	e005      	b.n	80002d6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80002ca:	6978      	ldr	r0, [r7, #20]
 80002cc:	f000 ffca 	bl	8001264 <vPortFree>
 80002d0:	e001      	b.n	80002d6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80002d2:	2300      	movs	r3, #0
 80002d4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d013      	beq.n	8000304 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80002dc:	88fa      	ldrh	r2, [r7, #6]
 80002de:	2300      	movs	r3, #0
 80002e0:	9303      	str	r3, [sp, #12]
 80002e2:	69fb      	ldr	r3, [r7, #28]
 80002e4:	9302      	str	r3, [sp, #8]
 80002e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	68b9      	ldr	r1, [r7, #8]
 80002f2:	68f8      	ldr	r0, [r7, #12]
 80002f4:	f000 f80e 	bl	8000314 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80002f8:	69f8      	ldr	r0, [r7, #28]
 80002fa:	f000 f891 	bl	8000420 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80002fe:	2301      	movs	r3, #1
 8000300:	61bb      	str	r3, [r7, #24]
 8000302:	e002      	b.n	800030a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000304:	f04f 33ff 	mov.w	r3, #4294967295
 8000308:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800030a:	69bb      	ldr	r3, [r7, #24]
    }
 800030c:	4618      	mov	r0, r3
 800030e:	3720      	adds	r7, #32
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800032c:	3b01      	subs	r3, #1
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	4413      	add	r3, r2
 8000332:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000334:	69bb      	ldr	r3, [r7, #24]
 8000336:	f023 0307 	bic.w	r3, r3, #7
 800033a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800033c:	69bb      	ldr	r3, [r7, #24]
 800033e:	f003 0307 	and.w	r3, r3, #7
 8000342:	2b00      	cmp	r3, #0
 8000344:	d00a      	beq.n	800035c <prvInitialiseNewTask+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800034a:	f383 8811 	msr	BASEPRI, r3
 800034e:	f3bf 8f6f 	isb	sy
 8000352:	f3bf 8f4f 	dsb	sy
 8000356:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000358:	bf00      	nop
 800035a:	e7fe      	b.n	800035a <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d01e      	beq.n	80003a0 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
 8000366:	e012      	b.n	800038e <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	69fb      	ldr	r3, [r7, #28]
 800036c:	4413      	add	r3, r2
 800036e:	7819      	ldrb	r1, [r3, #0]
 8000370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	4413      	add	r3, r2
 8000376:	3334      	adds	r3, #52	; 0x34
 8000378:	460a      	mov	r2, r1
 800037a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800037c:	68ba      	ldr	r2, [r7, #8]
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	4413      	add	r3, r2
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d006      	beq.n	8000396 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	3301      	adds	r3, #1
 800038c:	61fb      	str	r3, [r7, #28]
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	2b13      	cmp	r3, #19
 8000392:	d9e9      	bls.n	8000368 <prvInitialiseNewTask+0x54>
 8000394:	e000      	b.n	8000398 <prvInitialiseNewTask+0x84>
            {
                break;
 8000396:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800039a:	2200      	movs	r2, #0
 800039c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80003a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a2:	2b04      	cmp	r3, #4
 80003a4:	d90a      	bls.n	80003bc <prvInitialiseNewTask+0xa8>
        __asm volatile
 80003a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003aa:	f383 8811 	msr	BASEPRI, r3
 80003ae:	f3bf 8f6f 	isb	sy
 80003b2:	f3bf 8f4f 	dsb	sy
 80003b6:	613b      	str	r3, [r7, #16]
    }
 80003b8:	bf00      	nop
 80003ba:	e7fe      	b.n	80003ba <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80003bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003be:	2b04      	cmp	r3, #4
 80003c0:	d901      	bls.n	80003c6 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80003c2:	2304      	movs	r3, #4
 80003c4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80003c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003ca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80003cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003d0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80003d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003d4:	3304      	adds	r3, #4
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff fee9 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80003dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003de:	3318      	adds	r3, #24
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff fee4 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80003e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003ea:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ee:	f1c3 0205 	rsb	r2, r3, #5
 80003f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003f4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80003f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80003fc:	683a      	ldr	r2, [r7, #0]
 80003fe:	68f9      	ldr	r1, [r7, #12]
 8000400:	69b8      	ldr	r0, [r7, #24]
 8000402:	f000 fcc9 	bl	8000d98 <pxPortInitialiseStack>
 8000406:	4602      	mov	r2, r0
 8000408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800040a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800040c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800040e:	2b00      	cmp	r3, #0
 8000410:	d002      	beq.n	8000418 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000416:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000418:	bf00      	nop
 800041a:	3720      	adds	r7, #32
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000428:	f000 fdaa 	bl	8000f80 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800042c:	4b3e      	ldr	r3, [pc, #248]	; (8000528 <prvAddNewTaskToReadyList+0x108>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	3301      	adds	r3, #1
 8000432:	4a3d      	ldr	r2, [pc, #244]	; (8000528 <prvAddNewTaskToReadyList+0x108>)
 8000434:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <prvAddNewTaskToReadyList+0x10c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d109      	bne.n	8000452 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800043e:	4a3b      	ldr	r2, [pc, #236]	; (800052c <prvAddNewTaskToReadyList+0x10c>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000444:	4b38      	ldr	r3, [pc, #224]	; (8000528 <prvAddNewTaskToReadyList+0x108>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d110      	bne.n	800046e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800044c:	f000 fb8c 	bl	8000b68 <prvInitialiseTaskLists>
 8000450:	e00d      	b.n	800046e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000452:	4b37      	ldr	r3, [pc, #220]	; (8000530 <prvAddNewTaskToReadyList+0x110>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d109      	bne.n	800046e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800045a:	4b34      	ldr	r3, [pc, #208]	; (800052c <prvAddNewTaskToReadyList+0x10c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000464:	429a      	cmp	r2, r3
 8000466:	d802      	bhi.n	800046e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000468:	4a30      	ldr	r2, [pc, #192]	; (800052c <prvAddNewTaskToReadyList+0x10c>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800046e:	4b31      	ldr	r3, [pc, #196]	; (8000534 <prvAddNewTaskToReadyList+0x114>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	3301      	adds	r3, #1
 8000474:	4a2f      	ldr	r2, [pc, #188]	; (8000534 <prvAddNewTaskToReadyList+0x114>)
 8000476:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800047c:	2201      	movs	r2, #1
 800047e:	409a      	lsls	r2, r3
 8000480:	4b2d      	ldr	r3, [pc, #180]	; (8000538 <prvAddNewTaskToReadyList+0x118>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4313      	orrs	r3, r2
 8000486:	4a2c      	ldr	r2, [pc, #176]	; (8000538 <prvAddNewTaskToReadyList+0x118>)
 8000488:	6013      	str	r3, [r2, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800048e:	492b      	ldr	r1, [pc, #172]	; (800053c <prvAddNewTaskToReadyList+0x11c>)
 8000490:	4613      	mov	r3, r2
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	4413      	add	r3, r2
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	440b      	add	r3, r1
 800049a:	3304      	adds	r3, #4
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	3204      	adds	r2, #4
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	1d1a      	adds	r2, r3, #4
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004c4:	4613      	mov	r3, r2
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	4413      	add	r3, r2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	4a1b      	ldr	r2, [pc, #108]	; (800053c <prvAddNewTaskToReadyList+0x11c>)
 80004ce:	441a      	add	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004d8:	4918      	ldr	r1, [pc, #96]	; (800053c <prvAddNewTaskToReadyList+0x11c>)
 80004da:	4613      	mov	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	4413      	add	r3, r2
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	440b      	add	r3, r1
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	1c59      	adds	r1, r3, #1
 80004e8:	4814      	ldr	r0, [pc, #80]	; (800053c <prvAddNewTaskToReadyList+0x11c>)
 80004ea:	4613      	mov	r3, r2
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	4413      	add	r3, r2
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	4403      	add	r3, r0
 80004f4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80004f6:	f000 fd73 	bl	8000fe0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <prvAddNewTaskToReadyList+0x110>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d00e      	beq.n	8000520 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <prvAddNewTaskToReadyList+0x10c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050c:	429a      	cmp	r2, r3
 800050e:	d207      	bcs.n	8000520 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <prvAddNewTaskToReadyList+0x120>)
 8000512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	f3bf 8f4f 	dsb	sy
 800051c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200000fc 	.word	0x200000fc
 800052c:	20000024 	.word	0x20000024
 8000530:	20000108 	.word	0x20000108
 8000534:	20000118 	.word	0x20000118
 8000538:	20000104 	.word	0x20000104
 800053c:	20000028 	.word	0x20000028
 8000540:	e000ed04 	.word	0xe000ed04

08000544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d017      	beq.n	8000586 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <vTaskDelay+0x60>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00a      	beq.n	8000574 <vTaskDelay+0x30>
        __asm volatile
 800055e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000562:	f383 8811 	msr	BASEPRI, r3
 8000566:	f3bf 8f6f 	isb	sy
 800056a:	f3bf 8f4f 	dsb	sy
 800056e:	60bb      	str	r3, [r7, #8]
    }
 8000570:	bf00      	nop
 8000572:	e7fe      	b.n	8000572 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000574:	f000 f866 	bl	8000644 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000578:	2100      	movs	r1, #0
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 fb8c 	bl	8000c98 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000580:	f000 f86e 	bl	8000660 <xTaskResumeAll>
 8000584:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d107      	bne.n	800059c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <vTaskDelay+0x64>)
 800058e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	f3bf 8f4f 	dsb	sy
 8000598:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000124 	.word	0x20000124
 80005a8:	e000ed04 	.word	0xe000ed04

080005ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <vTaskStartScheduler+0x7c>)
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2300      	movs	r3, #0
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2246      	movs	r2, #70	; 0x46
 80005be:	491b      	ldr	r1, [pc, #108]	; (800062c <vTaskStartScheduler+0x80>)
 80005c0:	481b      	ldr	r0, [pc, #108]	; (8000630 <vTaskStartScheduler+0x84>)
 80005c2:	f7ff fe61 	bl	8000288 <xTaskCreate>
 80005c6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d116      	bne.n	80005fc <vTaskStartScheduler+0x50>
        __asm volatile
 80005ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d2:	f383 8811 	msr	BASEPRI, r3
 80005d6:	f3bf 8f6f 	isb	sy
 80005da:	f3bf 8f4f 	dsb	sy
 80005de:	60bb      	str	r3, [r7, #8]
    }
 80005e0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <vTaskStartScheduler+0x88>)
 80005e4:	f04f 32ff 	mov.w	r2, #4294967295
 80005e8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <vTaskStartScheduler+0x8c>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <vTaskStartScheduler+0x90>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80005f6:	f000 fc51 	bl	8000e9c <xPortStartScheduler>
 80005fa:	e00e      	b.n	800061a <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000602:	d10a      	bne.n	800061a <vTaskStartScheduler+0x6e>
        __asm volatile
 8000604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000608:	f383 8811 	msr	BASEPRI, r3
 800060c:	f3bf 8f6f 	isb	sy
 8000610:	f3bf 8f4f 	dsb	sy
 8000614:	607b      	str	r3, [r7, #4]
    }
 8000616:	bf00      	nop
 8000618:	e7fe      	b.n	8000618 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <vTaskStartScheduler+0x94>)
 800061c:	681b      	ldr	r3, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000120 	.word	0x20000120
 800062c:	08001a8c 	.word	0x08001a8c
 8000630:	08000b39 	.word	0x08000b39
 8000634:	2000011c 	.word	0x2000011c
 8000638:	20000108 	.word	0x20000108
 800063c:	20000100 	.word	0x20000100
 8000640:	20000000 	.word	0x20000000

08000644 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <vTaskSuspendAll+0x18>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	4a03      	ldr	r2, [pc, #12]	; (800065c <vTaskSuspendAll+0x18>)
 8000650:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000124 	.word	0x20000124

08000660 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800066e:	4b71      	ldr	r3, [pc, #452]	; (8000834 <xTaskResumeAll+0x1d4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10a      	bne.n	800068c <xTaskResumeAll+0x2c>
        __asm volatile
 8000676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800067a:	f383 8811 	msr	BASEPRI, r3
 800067e:	f3bf 8f6f 	isb	sy
 8000682:	f3bf 8f4f 	dsb	sy
 8000686:	607b      	str	r3, [r7, #4]
    }
 8000688:	bf00      	nop
 800068a:	e7fe      	b.n	800068a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800068c:	f000 fc78 	bl	8000f80 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000690:	4b68      	ldr	r3, [pc, #416]	; (8000834 <xTaskResumeAll+0x1d4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3b01      	subs	r3, #1
 8000696:	4a67      	ldr	r2, [pc, #412]	; (8000834 <xTaskResumeAll+0x1d4>)
 8000698:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800069a:	4b66      	ldr	r3, [pc, #408]	; (8000834 <xTaskResumeAll+0x1d4>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	f040 80c0 	bne.w	8000824 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80006a4:	4b64      	ldr	r3, [pc, #400]	; (8000838 <xTaskResumeAll+0x1d8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f000 80bb 	beq.w	8000824 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80006ae:	e08a      	b.n	80007c6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80006b0:	4b62      	ldr	r3, [pc, #392]	; (800083c <xTaskResumeAll+0x1dc>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	69fa      	ldr	r2, [r7, #28]
 80006c4:	6a12      	ldr	r2, [r2, #32]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	6a1b      	ldr	r3, [r3, #32]
 80006cc:	69fa      	ldr	r2, [r7, #28]
 80006ce:	69d2      	ldr	r2, [r2, #28]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3318      	adds	r3, #24
 80006da:	429a      	cmp	r2, r3
 80006dc:	d103      	bne.n	80006e6 <xTaskResumeAll+0x86>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	6a1a      	ldr	r2, [r3, #32]
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	2200      	movs	r2, #0
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1e5a      	subs	r2, r3, #1
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	69fa      	ldr	r2, [r7, #28]
 8000702:	68d2      	ldr	r2, [r2, #12]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	69fa      	ldr	r2, [r7, #28]
 800070c:	6892      	ldr	r2, [r2, #8]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	3304      	adds	r3, #4
 8000718:	429a      	cmp	r2, r3
 800071a:	d103      	bne.n	8000724 <xTaskResumeAll+0xc4>
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	68da      	ldr	r2, [r3, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1e5a      	subs	r2, r3, #1
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000738:	2201      	movs	r2, #1
 800073a:	409a      	lsls	r2, r3
 800073c:	4b40      	ldr	r3, [pc, #256]	; (8000840 <xTaskResumeAll+0x1e0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4313      	orrs	r3, r2
 8000742:	4a3f      	ldr	r2, [pc, #252]	; (8000840 <xTaskResumeAll+0x1e0>)
 8000744:	6013      	str	r3, [r2, #0]
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074a:	493e      	ldr	r1, [pc, #248]	; (8000844 <xTaskResumeAll+0x1e4>)
 800074c:	4613      	mov	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	440b      	add	r3, r1
 8000756:	3304      	adds	r3, #4
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	69fa      	ldr	r2, [r7, #28]
 8000770:	3204      	adds	r2, #4
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	1d1a      	adds	r2, r3, #4
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <xTaskResumeAll+0x1e4>)
 800078a:	441a      	add	r2, r3
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000794:	492b      	ldr	r1, [pc, #172]	; (8000844 <xTaskResumeAll+0x1e4>)
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	440b      	add	r3, r1
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	1c59      	adds	r1, r3, #1
 80007a4:	4827      	ldr	r0, [pc, #156]	; (8000844 <xTaskResumeAll+0x1e4>)
 80007a6:	4613      	mov	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4403      	add	r3, r0
 80007b0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <xTaskResumeAll+0x1e8>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007bc:	429a      	cmp	r2, r3
 80007be:	d302      	bcc.n	80007c6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <xTaskResumeAll+0x1ec>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <xTaskResumeAll+0x1dc>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f47f af70 	bne.w	80006b0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80007d6:	f000 fa45 	bl	8000c64 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <xTaskResumeAll+0x1f0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d010      	beq.n	8000808 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80007e6:	f000 f837 	bl	8000858 <xTaskIncrementTick>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <xTaskResumeAll+0x1ec>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f1      	bne.n	80007e6 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <xTaskResumeAll+0x1f0>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <xTaskResumeAll+0x1ec>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d009      	beq.n	8000824 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <xTaskResumeAll+0x1f4>)
 8000816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	f3bf 8f4f 	dsb	sy
 8000820:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000824:	f000 fbdc 	bl	8000fe0 <vPortExitCritical>

    return xAlreadyYielded;
 8000828:	69bb      	ldr	r3, [r7, #24]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000124 	.word	0x20000124
 8000838:	200000fc 	.word	0x200000fc
 800083c:	200000bc 	.word	0x200000bc
 8000840:	20000104 	.word	0x20000104
 8000844:	20000028 	.word	0x20000028
 8000848:	20000024 	.word	0x20000024
 800084c:	20000110 	.word	0x20000110
 8000850:	2000010c 	.word	0x2000010c
 8000854:	e000ed04 	.word	0xe000ed04

08000858 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000862:	4b7d      	ldr	r3, [pc, #500]	; (8000a58 <xTaskIncrementTick+0x200>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f040 80ec 	bne.w	8000a44 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800086c:	4b7b      	ldr	r3, [pc, #492]	; (8000a5c <xTaskIncrementTick+0x204>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000874:	4a79      	ldr	r2, [pc, #484]	; (8000a5c <xTaskIncrementTick+0x204>)
 8000876:	6a3b      	ldr	r3, [r7, #32]
 8000878:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d120      	bne.n	80008c2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000880:	4b77      	ldr	r3, [pc, #476]	; (8000a60 <xTaskIncrementTick+0x208>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00a      	beq.n	80008a0 <xTaskIncrementTick+0x48>
        __asm volatile
 800088a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800088e:	f383 8811 	msr	BASEPRI, r3
 8000892:	f3bf 8f6f 	isb	sy
 8000896:	f3bf 8f4f 	dsb	sy
 800089a:	607b      	str	r3, [r7, #4]
    }
 800089c:	bf00      	nop
 800089e:	e7fe      	b.n	800089e <xTaskIncrementTick+0x46>
 80008a0:	4b6f      	ldr	r3, [pc, #444]	; (8000a60 <xTaskIncrementTick+0x208>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	61fb      	str	r3, [r7, #28]
 80008a6:	4b6f      	ldr	r3, [pc, #444]	; (8000a64 <xTaskIncrementTick+0x20c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a6d      	ldr	r2, [pc, #436]	; (8000a60 <xTaskIncrementTick+0x208>)
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	4a6d      	ldr	r2, [pc, #436]	; (8000a64 <xTaskIncrementTick+0x20c>)
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b6c      	ldr	r3, [pc, #432]	; (8000a68 <xTaskIncrementTick+0x210>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	4a6b      	ldr	r2, [pc, #428]	; (8000a68 <xTaskIncrementTick+0x210>)
 80008bc:	6013      	str	r3, [r2, #0]
 80008be:	f000 f9d1 	bl	8000c64 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80008c2:	4b6a      	ldr	r3, [pc, #424]	; (8000a6c <xTaskIncrementTick+0x214>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	6a3a      	ldr	r2, [r7, #32]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	f0c0 80a6 	bcc.w	8000a1a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80008ce:	4b64      	ldr	r3, [pc, #400]	; (8000a60 <xTaskIncrementTick+0x208>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d104      	bne.n	80008e2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008d8:	4b64      	ldr	r3, [pc, #400]	; (8000a6c <xTaskIncrementTick+0x214>)
 80008da:	f04f 32ff 	mov.w	r2, #4294967295
 80008de:	601a      	str	r2, [r3, #0]
                    break;
 80008e0:	e09b      	b.n	8000a1a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80008e2:	4b5f      	ldr	r3, [pc, #380]	; (8000a60 <xTaskIncrementTick+0x208>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80008f2:	6a3a      	ldr	r2, [r7, #32]
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d203      	bcs.n	8000902 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80008fa:	4a5c      	ldr	r2, [pc, #368]	; (8000a6c <xTaskIncrementTick+0x214>)
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000900:	e08b      	b.n	8000a1a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	68d2      	ldr	r2, [r2, #12]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	6892      	ldr	r2, [r2, #8]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	685a      	ldr	r2, [r3, #4]
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	3304      	adds	r3, #4
 8000924:	429a      	cmp	r2, r3
 8000926:	d103      	bne.n	8000930 <xTaskIncrementTick+0xd8>
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	1e5a      	subs	r2, r3, #1
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000944:	2b00      	cmp	r3, #0
 8000946:	d01e      	beq.n	8000986 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	6a12      	ldr	r2, [r2, #32]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	69d2      	ldr	r2, [r2, #28]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	685a      	ldr	r2, [r3, #4]
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	3318      	adds	r3, #24
 800096a:	429a      	cmp	r2, r3
 800096c:	d103      	bne.n	8000976 <xTaskIncrementTick+0x11e>
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	6a1a      	ldr	r2, [r3, #32]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	2201      	movs	r2, #1
 800098c:	409a      	lsls	r2, r3
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <xTaskIncrementTick+0x218>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4313      	orrs	r3, r2
 8000994:	4a36      	ldr	r2, [pc, #216]	; (8000a70 <xTaskIncrementTick+0x218>)
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800099c:	4935      	ldr	r1, [pc, #212]	; (8000a74 <xTaskIncrementTick+0x21c>)
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	440b      	add	r3, r1
 80009a8:	3304      	adds	r3, #4
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	3204      	adds	r2, #4
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	1d1a      	adds	r2, r3, #4
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009d2:	4613      	mov	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <xTaskIncrementTick+0x21c>)
 80009dc:	441a      	add	r2, r3
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	615a      	str	r2, [r3, #20]
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e6:	4923      	ldr	r1, [pc, #140]	; (8000a74 <xTaskIncrementTick+0x21c>)
 80009e8:	4613      	mov	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4413      	add	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	440b      	add	r3, r1
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	1c59      	adds	r1, r3, #1
 80009f6:	481f      	ldr	r0, [pc, #124]	; (8000a74 <xTaskIncrementTick+0x21c>)
 80009f8:	4613      	mov	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4403      	add	r3, r0
 8000a02:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <xTaskIncrementTick+0x220>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	f67f af5d 	bls.w	80008ce <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8000a14:	2301      	movs	r3, #1
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a18:	e759      	b.n	80008ce <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <xTaskIncrementTick+0x220>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a20:	4914      	ldr	r1, [pc, #80]	; (8000a74 <xTaskIncrementTick+0x21c>)
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d901      	bls.n	8000a36 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <xTaskIncrementTick+0x224>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d007      	beq.n	8000a4e <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
 8000a42:	e004      	b.n	8000a4e <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <xTaskIncrementTick+0x228>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <xTaskIncrementTick+0x228>)
 8000a4c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000124 	.word	0x20000124
 8000a5c:	20000100 	.word	0x20000100
 8000a60:	200000b4 	.word	0x200000b4
 8000a64:	200000b8 	.word	0x200000b8
 8000a68:	20000114 	.word	0x20000114
 8000a6c:	2000011c 	.word	0x2000011c
 8000a70:	20000104 	.word	0x20000104
 8000a74:	20000028 	.word	0x20000028
 8000a78:	20000024 	.word	0x20000024
 8000a7c:	20000110 	.word	0x20000110
 8000a80:	2000010c 	.word	0x2000010c

08000a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000a84:	b480      	push	{r7}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000a8a:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <vTaskSwitchContext+0xa0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <vTaskSwitchContext+0xa4>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000a98:	e03f      	b.n	8000b1a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <vTaskSwitchContext+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <vTaskSwitchContext+0xa8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	fab3 f383 	clz	r3, r3
 8000aac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000aae:	7afb      	ldrb	r3, [r7, #11]
 8000ab0:	f1c3 031f 	rsb	r3, r3, #31
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	491e      	ldr	r1, [pc, #120]	; (8000b30 <vTaskSwitchContext+0xac>)
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	4613      	mov	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10a      	bne.n	8000ae0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8000aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ace:	f383 8811 	msr	BASEPRI, r3
 8000ad2:	f3bf 8f6f 	isb	sy
 8000ad6:	f3bf 8f4f 	dsb	sy
 8000ada:	607b      	str	r3, [r7, #4]
    }
 8000adc:	bf00      	nop
 8000ade:	e7fe      	b.n	8000ade <vTaskSwitchContext+0x5a>
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <vTaskSwitchContext+0xac>)
 8000aec:	4413      	add	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	3308      	adds	r3, #8
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d104      	bne.n	8000b10 <vTaskSwitchContext+0x8c>
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <vTaskSwitchContext+0xb0>)
 8000b18:	6013      	str	r3, [r2, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	371c      	adds	r7, #28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	20000124 	.word	0x20000124
 8000b28:	20000110 	.word	0x20000110
 8000b2c:	20000104 	.word	0x20000104
 8000b30:	20000028 	.word	0x20000028
 8000b34:	20000024 	.word	0x20000024

08000b38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000b40:	f000 f852 	bl	8000be8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <prvIdleTask+0x28>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d9f9      	bls.n	8000b40 <prvIdleTask+0x8>
            {
                taskYIELD();
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <prvIdleTask+0x2c>)
 8000b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	f3bf 8f4f 	dsb	sy
 8000b58:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000b5c:	e7f0      	b.n	8000b40 <prvIdleTask+0x8>
 8000b5e:	bf00      	nop
 8000b60:	20000028 	.word	0x20000028
 8000b64:	e000ed04 	.word	0xe000ed04

08000b68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	e00c      	b.n	8000b8e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <prvInitialiseTaskLists+0x60>)
 8000b80:	4413      	add	r3, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff faf4 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d9ef      	bls.n	8000b74 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <prvInitialiseTaskLists+0x64>)
 8000b96:	f7ff faeb 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <prvInitialiseTaskLists+0x68>)
 8000b9c:	f7ff fae8 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <prvInitialiseTaskLists+0x6c>)
 8000ba2:	f7ff fae5 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <prvInitialiseTaskLists+0x70>)
 8000ba8:	f7ff fae2 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000bac:	480b      	ldr	r0, [pc, #44]	; (8000bdc <prvInitialiseTaskLists+0x74>)
 8000bae:	f7ff fadf 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <prvInitialiseTaskLists+0x78>)
 8000bb4:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <prvInitialiseTaskLists+0x64>)
 8000bb6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <prvInitialiseTaskLists+0x7c>)
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <prvInitialiseTaskLists+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000028 	.word	0x20000028
 8000bcc:	2000008c 	.word	0x2000008c
 8000bd0:	200000a0 	.word	0x200000a0
 8000bd4:	200000bc 	.word	0x200000bc
 8000bd8:	200000d0 	.word	0x200000d0
 8000bdc:	200000e8 	.word	0x200000e8
 8000be0:	200000b4 	.word	0x200000b4
 8000be4:	200000b8 	.word	0x200000b8

08000be8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000bee:	e019      	b.n	8000c24 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8000bf0:	f000 f9c6 	bl	8000f80 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <prvCheckTasksWaitingTermination+0x50>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fb18 	bl	8000236 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <prvCheckTasksWaitingTermination+0x54>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <prvCheckTasksWaitingTermination+0x54>)
 8000c0e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <prvCheckTasksWaitingTermination+0x58>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <prvCheckTasksWaitingTermination+0x58>)
 8000c18:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8000c1a:	f000 f9e1 	bl	8000fe0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f810 	bl	8000c44 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <prvCheckTasksWaitingTermination+0x58>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1e1      	bne.n	8000bf0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000d0 	.word	0x200000d0
 8000c3c:	200000fc 	.word	0x200000fc
 8000c40:	200000e4 	.word	0x200000e4

08000c44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fb07 	bl	8001264 <vPortFree>
            vPortFree( pxTCB );
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f000 fb04 	bl	8001264 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <prvResetNextTaskUnblockTime+0x2c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d104      	bne.n	8000c7c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <prvResetNextTaskUnblockTime+0x30>)
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000c7a:	e005      	b.n	8000c88 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <prvResetNextTaskUnblockTime+0x2c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <prvResetNextTaskUnblockTime+0x30>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	200000b4 	.word	0x200000b4
 8000c94:	2000011c 	.word	0x2000011c

08000c98 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000ca2:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <prvAddCurrentTaskToDelayedList+0xe4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000ca8:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	3304      	adds	r3, #4
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fac1 	bl	8000236 <uxListRemove>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10b      	bne.n	8000cd2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000cba:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <prvAddCurrentTaskToDelayedList+0xec>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	4a2d      	ldr	r2, [pc, #180]	; (8000d84 <prvAddCurrentTaskToDelayedList+0xec>)
 8000cd0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd8:	d124      	bne.n	8000d24 <prvAddCurrentTaskToDelayedList+0x8c>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d021      	beq.n	8000d24 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000ce0:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	6892      	ldr	r2, [r2, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	3204      	adds	r2, #4
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1d1a      	adds	r2, r3, #4
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000d22:	e026      	b.n	8000d72 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d209      	bcs.n	8000d50 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <prvAddCurrentTaskToDelayedList+0xf4>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3304      	adds	r3, #4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4610      	mov	r0, r2
 8000d4a:	f7ff fa3c 	bl	80001c6 <vListInsert>
}
 8000d4e:	e010      	b.n	8000d72 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <prvAddCurrentTaskToDelayedList+0xf8>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	f7ff fa32 	bl	80001c6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <prvAddCurrentTaskToDelayedList+0xfc>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d202      	bcs.n	8000d72 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8000d6c:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <prvAddCurrentTaskToDelayedList+0xfc>)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6013      	str	r3, [r2, #0]
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000100 	.word	0x20000100
 8000d80:	20000024 	.word	0x20000024
 8000d84:	20000104 	.word	0x20000104
 8000d88:	200000e8 	.word	0x200000e8
 8000d8c:	200000b8 	.word	0x200000b8
 8000d90:	200000b4 	.word	0x200000b4
 8000d94:	2000011c 	.word	0x2000011c

08000d98 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3b04      	subs	r3, #4
 8000da8:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000db0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3b04      	subs	r3, #4
 8000db6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	f023 0201 	bic.w	r2, r3, #1
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3b04      	subs	r3, #4
 8000dc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000dc8:	4a08      	ldr	r2, [pc, #32]	; (8000dec <pxPortInitialiseStack+0x54>)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3b14      	subs	r3, #20
 8000dd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3b20      	subs	r3, #32
 8000dde:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000de0:	68fb      	ldr	r3, [r7, #12]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	08000df1 	.word	0x08000df1

08000df0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <prvTaskExitError+0x54>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e02:	d00a      	beq.n	8000e1a <prvTaskExitError+0x2a>
        __asm volatile
 8000e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e08:	f383 8811 	msr	BASEPRI, r3
 8000e0c:	f3bf 8f6f 	isb	sy
 8000e10:	f3bf 8f4f 	dsb	sy
 8000e14:	60fb      	str	r3, [r7, #12]
    }
 8000e16:	bf00      	nop
 8000e18:	e7fe      	b.n	8000e18 <prvTaskExitError+0x28>
        __asm volatile
 8000e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1e:	f383 8811 	msr	BASEPRI, r3
 8000e22:	f3bf 8f6f 	isb	sy
 8000e26:	f3bf 8f4f 	dsb	sy
 8000e2a:	60bb      	str	r3, [r7, #8]
    }
 8000e2c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000e2e:	bf00      	nop
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0fc      	beq.n	8000e30 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000004 	.word	0x20000004
	...

08000e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <pxCurrentTCBConst2>)
 8000e52:	6819      	ldr	r1, [r3, #0]
 8000e54:	6808      	ldr	r0, [r1, #0]
 8000e56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e5a:	f380 8809 	msr	PSP, r0
 8000e5e:	f3bf 8f6f 	isb	sy
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	f380 8811 	msr	BASEPRI, r0
 8000e6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000e6e:	4770      	bx	lr

08000e70 <pxCurrentTCBConst2>:
 8000e70:	20000024 	.word	0x20000024
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop

08000e78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000e78:	4806      	ldr	r0, [pc, #24]	; (8000e94 <prvPortStartFirstTask+0x1c>)
 8000e7a:	6800      	ldr	r0, [r0, #0]
 8000e7c:	6800      	ldr	r0, [r0, #0]
 8000e7e:	f380 8808 	msr	MSP, r0
 8000e82:	b662      	cpsie	i
 8000e84:	b661      	cpsie	f
 8000e86:	f3bf 8f4f 	dsb	sy
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	df00      	svc	0
 8000e90:	bf00      	nop
 8000e92:	0000      	.short	0x0000
 8000e94:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop

08000e9c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000ea2:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <xPortStartScheduler+0xd0>)
 8000ea4:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	22ff      	movs	r2, #255	; 0xff
 8000eb2:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <xPortStartScheduler+0xd4>)
 8000ec8:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <xPortStartScheduler+0xd8>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000ed0:	e009      	b.n	8000ee6 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8000ed2:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <xPortStartScheduler+0xd8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	4a26      	ldr	r2, [pc, #152]	; (8000f74 <xPortStartScheduler+0xd8>)
 8000eda:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eee:	2b80      	cmp	r3, #128	; 0x80
 8000ef0:	d0ef      	beq.n	8000ed2 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <xPortStartScheduler+0xd8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d00a      	beq.n	8000f14 <xPortStartScheduler+0x78>
        __asm volatile
 8000efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f02:	f383 8811 	msr	BASEPRI, r3
 8000f06:	f3bf 8f6f 	isb	sy
 8000f0a:	f3bf 8f4f 	dsb	sy
 8000f0e:	60bb      	str	r3, [r7, #8]
    }
 8000f10:	bf00      	nop
 8000f12:	e7fe      	b.n	8000f12 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <xPortStartScheduler+0xd8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <xPortStartScheduler+0xd8>)
 8000f1c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <xPortStartScheduler+0xd8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f26:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <xPortStartScheduler+0xd8>)
 8000f28:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <xPortStartScheduler+0xdc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <xPortStartScheduler+0xdc>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <xPortStartScheduler+0xdc>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <xPortStartScheduler+0xdc>)
 8000f44:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000f48:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000f4a:	f000 f8b7 	bl	80010bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <xPortStartScheduler+0xe0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000f54:	f7ff ff90 	bl	8000e78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000f58:	f7ff fd94 	bl	8000a84 <vTaskSwitchContext>
    prvTaskExitError();
 8000f5c:	f7ff ff48 	bl	8000df0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e400 	.word	0xe000e400
 8000f70:	20000128 	.word	0x20000128
 8000f74:	2000012c 	.word	0x2000012c
 8000f78:	e000ed20 	.word	0xe000ed20
 8000f7c:	20000004 	.word	0x20000004

08000f80 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
        __asm volatile
 8000f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f8a:	f383 8811 	msr	BASEPRI, r3
 8000f8e:	f3bf 8f6f 	isb	sy
 8000f92:	f3bf 8f4f 	dsb	sy
 8000f96:	607b      	str	r3, [r7, #4]
    }
 8000f98:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <vPortEnterCritical+0x58>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <vPortEnterCritical+0x58>)
 8000fa2:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <vPortEnterCritical+0x58>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d10f      	bne.n	8000fcc <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <vPortEnterCritical+0x5c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00a      	beq.n	8000fcc <vPortEnterCritical+0x4c>
        __asm volatile
 8000fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fba:	f383 8811 	msr	BASEPRI, r3
 8000fbe:	f3bf 8f6f 	isb	sy
 8000fc2:	f3bf 8f4f 	dsb	sy
 8000fc6:	603b      	str	r3, [r7, #0]
    }
 8000fc8:	bf00      	nop
 8000fca:	e7fe      	b.n	8000fca <vPortEnterCritical+0x4a>
    }
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000004 	.word	0x20000004
 8000fdc:	e000ed04 	.word	0xe000ed04

08000fe0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <vPortExitCritical+0x4c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10a      	bne.n	8001004 <vPortExitCritical+0x24>
        __asm volatile
 8000fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff2:	f383 8811 	msr	BASEPRI, r3
 8000ff6:	f3bf 8f6f 	isb	sy
 8000ffa:	f3bf 8f4f 	dsb	sy
 8000ffe:	607b      	str	r3, [r7, #4]
    }
 8001000:	bf00      	nop
 8001002:	e7fe      	b.n	8001002 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <vPortExitCritical+0x4c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3b01      	subs	r3, #1
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <vPortExitCritical+0x4c>)
 800100c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <vPortExitCritical+0x4c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d105      	bne.n	8001022 <vPortExitCritical+0x42>
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001020:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	20000004 	.word	0x20000004

08001030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001030:	f3ef 8009 	mrs	r0, PSP
 8001034:	f3bf 8f6f 	isb	sy
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <pxCurrentTCBConst>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001040:	6010      	str	r0, [r2, #0]
 8001042:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001046:	f04f 0050 	mov.w	r0, #80	; 0x50
 800104a:	f380 8811 	msr	BASEPRI, r0
 800104e:	f7ff fd19 	bl	8000a84 <vTaskSwitchContext>
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	f380 8811 	msr	BASEPRI, r0
 800105a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800105e:	6819      	ldr	r1, [r3, #0]
 8001060:	6808      	ldr	r0, [r1, #0]
 8001062:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001066:	f380 8809 	msr	PSP, r0
 800106a:	f3bf 8f6f 	isb	sy
 800106e:	4770      	bx	lr

08001070 <pxCurrentTCBConst>:
 8001070:	20000024 	.word	0x20000024
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop

08001078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
        __asm volatile
 800107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001082:	f383 8811 	msr	BASEPRI, r3
 8001086:	f3bf 8f6f 	isb	sy
 800108a:	f3bf 8f4f 	dsb	sy
 800108e:	607b      	str	r3, [r7, #4]
    }
 8001090:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001092:	f7ff fbe1 	bl	8000858 <xTaskIncrementTick>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <SysTick_Handler+0x40>)
 800109e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f383 8811 	msr	BASEPRI, r3
    }
 80010ae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	e000ed04 	.word	0xe000ed04

080010bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <vPortSetupTimerInterrupt+0x28>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <vPortSetupTimerInterrupt+0x2c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <vPortSetupTimerInterrupt+0x30>)
 80010ce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010d2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <vPortSetupTimerInterrupt+0x28>)
 80010d6:	2207      	movs	r2, #7
 80010d8:	601a      	str	r2, [r3, #0]
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010
 80010e8:	e000e018 	.word	0xe000e018
 80010ec:	e000e014 	.word	0xe000e014

080010f0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80010fc:	f7ff faa2 	bl	8000644 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001100:	4b53      	ldr	r3, [pc, #332]	; (8001250 <pvPortMalloc+0x160>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001108:	f000 f908 	bl	800131c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d012      	beq.n	8001138 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001112:	2208      	movs	r2, #8
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	3308      	adds	r3, #8
 800111e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	43db      	mvns	r3, r3
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	d804      	bhi.n	8001134 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	4413      	add	r3, r2
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	e001      	b.n	8001138 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db70      	blt.n	8001220 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d06d      	beq.n	8001220 <pvPortMalloc+0x130>
 8001144:	4b43      	ldr	r3, [pc, #268]	; (8001254 <pvPortMalloc+0x164>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	429a      	cmp	r2, r3
 800114c:	d868      	bhi.n	8001220 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800114e:	4b42      	ldr	r3, [pc, #264]	; (8001258 <pvPortMalloc+0x168>)
 8001150:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001152:	4b41      	ldr	r3, [pc, #260]	; (8001258 <pvPortMalloc+0x168>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001158:	e004      	b.n	8001164 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	429a      	cmp	r2, r3
 800116c:	d903      	bls.n	8001176 <pvPortMalloc+0x86>
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f1      	bne.n	800115a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001176:	4b36      	ldr	r3, [pc, #216]	; (8001250 <pvPortMalloc+0x160>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117c:	429a      	cmp	r2, r3
 800117e:	d04f      	beq.n	8001220 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001180:	6a3b      	ldr	r3, [r7, #32]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2208      	movs	r2, #8
 8001186:	4413      	add	r3, r2
 8001188:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	1ad2      	subs	r2, r2, r3
 800119a:	2308      	movs	r3, #8
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	429a      	cmp	r2, r3
 80011a0:	d91f      	bls.n	80011e2 <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80011a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00a      	beq.n	80011ca <pvPortMalloc+0xda>
        __asm volatile
 80011b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b8:	f383 8811 	msr	BASEPRI, r3
 80011bc:	f3bf 8f6f 	isb	sy
 80011c0:	f3bf 8f4f 	dsb	sy
 80011c4:	613b      	str	r3, [r7, #16]
    }
 80011c6:	bf00      	nop
 80011c8:	e7fe      	b.n	80011c8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	1ad2      	subs	r2, r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80011dc:	6978      	ldr	r0, [r7, #20]
 80011de:	f000 f8f9 	bl	80013d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <pvPortMalloc+0x164>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	4a19      	ldr	r2, [pc, #100]	; (8001254 <pvPortMalloc+0x164>)
 80011ee:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <pvPortMalloc+0x164>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <pvPortMalloc+0x16c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d203      	bcs.n	8001204 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <pvPortMalloc+0x164>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a16      	ldr	r2, [pc, #88]	; (800125c <pvPortMalloc+0x16c>)
 8001202:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <pvPortMalloc+0x170>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	4a10      	ldr	r2, [pc, #64]	; (8001260 <pvPortMalloc+0x170>)
 800121e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001220:	f7ff fa1e 	bl	8000660 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00a      	beq.n	8001244 <pvPortMalloc+0x154>
        __asm volatile
 800122e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001232:	f383 8811 	msr	BASEPRI, r3
 8001236:	f3bf 8f6f 	isb	sy
 800123a:	f3bf 8f4f 	dsb	sy
 800123e:	60fb      	str	r3, [r7, #12]
    }
 8001240:	bf00      	nop
 8001242:	e7fe      	b.n	8001242 <pvPortMalloc+0x152>
    return pvReturn;
 8001244:	69fb      	ldr	r3, [r7, #28]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20002138 	.word	0x20002138
 8001254:	2000213c 	.word	0x2000213c
 8001258:	20002130 	.word	0x20002130
 800125c:	20002140 	.word	0x20002140
 8001260:	20002144 	.word	0x20002144

08001264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d049      	beq.n	800130a <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001276:	2308      	movs	r3, #8
 8001278:	425b      	negs	r3, r3
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4413      	add	r3, r2
 800127e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <vPortFree+0x3e>
        __asm volatile
 800128c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001290:	f383 8811 	msr	BASEPRI, r3
 8001294:	f3bf 8f6f 	isb	sy
 8001298:	f3bf 8f4f 	dsb	sy
 800129c:	60fb      	str	r3, [r7, #12]
    }
 800129e:	bf00      	nop
 80012a0:	e7fe      	b.n	80012a0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00a      	beq.n	80012c0 <vPortFree+0x5c>
        __asm volatile
 80012aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ae:	f383 8811 	msr	BASEPRI, r3
 80012b2:	f3bf 8f6f 	isb	sy
 80012b6:	f3bf 8f4f 	dsb	sy
 80012ba:	60bb      	str	r3, [r7, #8]
    }
 80012bc:	bf00      	nop
 80012be:	e7fe      	b.n	80012be <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	0fdb      	lsrs	r3, r3, #31
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d01c      	beq.n	800130a <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d118      	bne.n	800130a <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80012e4:	f7ff f9ae 	bl	8000644 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <vPortFree+0xb0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <vPortFree+0xb0>)
 80012f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80012f6:	6938      	ldr	r0, [r7, #16]
 80012f8:	f000 f86c 	bl	80013d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <vPortFree+0xb4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <vPortFree+0xb4>)
 8001304:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001306:	f7ff f9ab 	bl	8000660 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000213c 	.word	0x2000213c
 8001318:	20002148 	.word	0x20002148

0800131c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001326:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <prvHeapInit+0xa4>)
 800132a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00c      	beq.n	8001350 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3307      	adds	r3, #7
 800133a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f023 0307 	bic.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <prvHeapInit+0xa4>)
 800134c:	4413      	add	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <prvHeapInit+0xa8>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <prvHeapInit+0xa8>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	4413      	add	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001368:	2208      	movs	r2, #8
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1a9b      	subs	r3, r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f023 0307 	bic.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <prvHeapInit+0xac>)
 800137c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <prvHeapInit+0xac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <prvHeapInit+0xac>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <prvHeapInit+0xac>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a08      	ldr	r2, [pc, #32]	; (80013cc <prvHeapInit+0xb0>)
 80013aa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <prvHeapInit+0xb4>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000130 	.word	0x20000130
 80013c4:	20002130 	.word	0x20002130
 80013c8:	20002138 	.word	0x20002138
 80013cc:	20002140 	.word	0x20002140
 80013d0:	2000213c 	.word	0x2000213c

080013d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013dc:	4b27      	ldr	r3, [pc, #156]	; (800147c <prvInsertBlockIntoFreeList+0xa8>)
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e002      	b.n	80013e8 <prvInsertBlockIntoFreeList+0x14>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d8f7      	bhi.n	80013e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	4413      	add	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d108      	bne.n	8001416 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	441a      	add	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	441a      	add	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d118      	bne.n	800145c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <prvInsertBlockIntoFreeList+0xac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d00d      	beq.n	8001452 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	441a      	add	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e008      	b.n	8001464 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <prvInsertBlockIntoFreeList+0xac>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e003      	b.n	8001464 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	d002      	beq.n	8001472 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20002130 	.word	0x20002130
 8001480:	20002138 	.word	0x20002138

08001484 <_delay_ms>:
#include "Common_Function.h"
void	_delay_ms(u32 ticks){
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	u32 i;
	for( i = 0; i < (ticks * 500) ; i++)
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	e003      	b.n	800149a <_delay_ms+0x16>
	{
		asm("NOP");
 8001492:	bf00      	nop
	for( i = 0; i < (ticks * 500) ; i++)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3f3      	bcc.n	8001492 <_delay_ms+0xe>
	}
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
	...

080014b8 <DIO_voidSetPinDirection>:




void	DIO_voidSetPinDirection(u8 port, u8 pin, u8 Direction)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
 80014c2:	460b      	mov	r3, r1
 80014c4:	71bb      	strb	r3, [r7, #6]
 80014c6:	4613      	mov	r3, r2
 80014c8:	717b      	strb	r3, [r7, #5]
	/*		Range Check 		*/
	if(port < 3 && pin < 16)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	f200 80b3 	bhi.w	8001638 <DIO_voidSetPinDirection+0x180>
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	f200 80af 	bhi.w	8001638 <DIO_voidSetPinDirection+0x180>
	{
		if(pin<8)	/*		Low	(PIN0:PIN7) CRL	*/
 80014da:	79bb      	ldrb	r3, [r7, #6]
 80014dc:	2b07      	cmp	r3, #7
 80014de:	d852      	bhi.n	8001586 <DIO_voidSetPinDirection+0xce>
		{
			switch(port)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d037      	beq.n	8001556 <DIO_voidSetPinDirection+0x9e>
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	f300 80a6 	bgt.w	8001638 <DIO_voidSetPinDirection+0x180>
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <DIO_voidSetPinDirection+0x3e>
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d018      	beq.n	8001526 <DIO_voidSetPinDirection+0x6e>
				break;
			}

		}
	}else{/*	Return Error	*/}
}
 80014f4:	e0a0      	b.n	8001638 <DIO_voidSetPinDirection+0x180>
				GPIOA_CRL &= ~((0b1111)<<(pin * 4));
 80014f6:	4b53      	ldr	r3, [pc, #332]	; (8001644 <DIO_voidSetPinDirection+0x18c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	79ba      	ldrb	r2, [r7, #6]
 80014fc:	0092      	lsls	r2, r2, #2
 80014fe:	210f      	movs	r1, #15
 8001500:	fa01 f202 	lsl.w	r2, r1, r2
 8001504:	43d2      	mvns	r2, r2
 8001506:	4611      	mov	r1, r2
 8001508:	4a4e      	ldr	r2, [pc, #312]	; (8001644 <DIO_voidSetPinDirection+0x18c>)
 800150a:	400b      	ands	r3, r1
 800150c:	6013      	str	r3, [r2, #0]
				GPIOA_CRL |=  ((Direction)<<(pin * 4));
 800150e:	4b4d      	ldr	r3, [pc, #308]	; (8001644 <DIO_voidSetPinDirection+0x18c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	7979      	ldrb	r1, [r7, #5]
 8001514:	79ba      	ldrb	r2, [r7, #6]
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	fa01 f202 	lsl.w	r2, r1, r2
 800151c:	4611      	mov	r1, r2
 800151e:	4a49      	ldr	r2, [pc, #292]	; (8001644 <DIO_voidSetPinDirection+0x18c>)
 8001520:	430b      	orrs	r3, r1
 8001522:	6013      	str	r3, [r2, #0]
				break;
 8001524:	e088      	b.n	8001638 <DIO_voidSetPinDirection+0x180>
				GPIOB_CRL &= ~((0b1111)<<(pin * 4));
 8001526:	4b48      	ldr	r3, [pc, #288]	; (8001648 <DIO_voidSetPinDirection+0x190>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	79ba      	ldrb	r2, [r7, #6]
 800152c:	0092      	lsls	r2, r2, #2
 800152e:	210f      	movs	r1, #15
 8001530:	fa01 f202 	lsl.w	r2, r1, r2
 8001534:	43d2      	mvns	r2, r2
 8001536:	4611      	mov	r1, r2
 8001538:	4a43      	ldr	r2, [pc, #268]	; (8001648 <DIO_voidSetPinDirection+0x190>)
 800153a:	400b      	ands	r3, r1
 800153c:	6013      	str	r3, [r2, #0]
				GPIOB_CRL |=  ((Direction)<<(pin * 4));
 800153e:	4b42      	ldr	r3, [pc, #264]	; (8001648 <DIO_voidSetPinDirection+0x190>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	7979      	ldrb	r1, [r7, #5]
 8001544:	79ba      	ldrb	r2, [r7, #6]
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	fa01 f202 	lsl.w	r2, r1, r2
 800154c:	4611      	mov	r1, r2
 800154e:	4a3e      	ldr	r2, [pc, #248]	; (8001648 <DIO_voidSetPinDirection+0x190>)
 8001550:	430b      	orrs	r3, r1
 8001552:	6013      	str	r3, [r2, #0]
				break;
 8001554:	e070      	b.n	8001638 <DIO_voidSetPinDirection+0x180>
				GPIOC_CRL &= ~((0b1111)<<(pin * 4));
 8001556:	4b3d      	ldr	r3, [pc, #244]	; (800164c <DIO_voidSetPinDirection+0x194>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	79ba      	ldrb	r2, [r7, #6]
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	210f      	movs	r1, #15
 8001560:	fa01 f202 	lsl.w	r2, r1, r2
 8001564:	43d2      	mvns	r2, r2
 8001566:	4611      	mov	r1, r2
 8001568:	4a38      	ldr	r2, [pc, #224]	; (800164c <DIO_voidSetPinDirection+0x194>)
 800156a:	400b      	ands	r3, r1
 800156c:	6013      	str	r3, [r2, #0]
				GPIOC_CRL |=  ((Direction)<<(pin * 4));
 800156e:	4b37      	ldr	r3, [pc, #220]	; (800164c <DIO_voidSetPinDirection+0x194>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	7979      	ldrb	r1, [r7, #5]
 8001574:	79ba      	ldrb	r2, [r7, #6]
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	fa01 f202 	lsl.w	r2, r1, r2
 800157c:	4611      	mov	r1, r2
 800157e:	4a33      	ldr	r2, [pc, #204]	; (800164c <DIO_voidSetPinDirection+0x194>)
 8001580:	430b      	orrs	r3, r1
 8001582:	6013      	str	r3, [r2, #0]
				break;
 8001584:	e058      	b.n	8001638 <DIO_voidSetPinDirection+0x180>
		}else if(pin<16)	/*		Low	(PIN8:PIN15) CRL	*/
 8001586:	79bb      	ldrb	r3, [r7, #6]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d854      	bhi.n	8001636 <DIO_voidSetPinDirection+0x17e>
			pin -= 8;
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	3b08      	subs	r3, #8
 8001590:	71bb      	strb	r3, [r7, #6]
			switch(port)
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d036      	beq.n	8001606 <DIO_voidSetPinDirection+0x14e>
 8001598:	2b02      	cmp	r3, #2
 800159a:	dc4d      	bgt.n	8001638 <DIO_voidSetPinDirection+0x180>
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <DIO_voidSetPinDirection+0xee>
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d018      	beq.n	80015d6 <DIO_voidSetPinDirection+0x11e>
}
 80015a4:	e048      	b.n	8001638 <DIO_voidSetPinDirection+0x180>
				GPIOA_CRH &= ~((0b1111)<<(pin * 4));
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <DIO_voidSetPinDirection+0x198>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	79ba      	ldrb	r2, [r7, #6]
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	210f      	movs	r1, #15
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	43d2      	mvns	r2, r2
 80015b6:	4611      	mov	r1, r2
 80015b8:	4a25      	ldr	r2, [pc, #148]	; (8001650 <DIO_voidSetPinDirection+0x198>)
 80015ba:	400b      	ands	r3, r1
 80015bc:	6013      	str	r3, [r2, #0]
				GPIOA_CRH |=  ((Direction)<<(pin * 4));
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <DIO_voidSetPinDirection+0x198>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	7979      	ldrb	r1, [r7, #5]
 80015c4:	79ba      	ldrb	r2, [r7, #6]
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	fa01 f202 	lsl.w	r2, r1, r2
 80015cc:	4611      	mov	r1, r2
 80015ce:	4a20      	ldr	r2, [pc, #128]	; (8001650 <DIO_voidSetPinDirection+0x198>)
 80015d0:	430b      	orrs	r3, r1
 80015d2:	6013      	str	r3, [r2, #0]
				break;
 80015d4:	e030      	b.n	8001638 <DIO_voidSetPinDirection+0x180>
				GPIOB_CRH &= ~((0b1111)<<(pin * 4));
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <DIO_voidSetPinDirection+0x19c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	79ba      	ldrb	r2, [r7, #6]
 80015dc:	0092      	lsls	r2, r2, #2
 80015de:	210f      	movs	r1, #15
 80015e0:	fa01 f202 	lsl.w	r2, r1, r2
 80015e4:	43d2      	mvns	r2, r2
 80015e6:	4611      	mov	r1, r2
 80015e8:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <DIO_voidSetPinDirection+0x19c>)
 80015ea:	400b      	ands	r3, r1
 80015ec:	6013      	str	r3, [r2, #0]
				GPIOB_CRH |=  ((Direction)<<(pin * 4));
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <DIO_voidSetPinDirection+0x19c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	7979      	ldrb	r1, [r7, #5]
 80015f4:	79ba      	ldrb	r2, [r7, #6]
 80015f6:	0092      	lsls	r2, r2, #2
 80015f8:	fa01 f202 	lsl.w	r2, r1, r2
 80015fc:	4611      	mov	r1, r2
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <DIO_voidSetPinDirection+0x19c>)
 8001600:	430b      	orrs	r3, r1
 8001602:	6013      	str	r3, [r2, #0]
				break;
 8001604:	e018      	b.n	8001638 <DIO_voidSetPinDirection+0x180>
				GPIOC_CRH &= ~((0b1111)<<(pin * 4));
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <DIO_voidSetPinDirection+0x1a0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	79ba      	ldrb	r2, [r7, #6]
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	210f      	movs	r1, #15
 8001610:	fa01 f202 	lsl.w	r2, r1, r2
 8001614:	43d2      	mvns	r2, r2
 8001616:	4611      	mov	r1, r2
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <DIO_voidSetPinDirection+0x1a0>)
 800161a:	400b      	ands	r3, r1
 800161c:	6013      	str	r3, [r2, #0]
				GPIOC_CRH |=  ((Direction)<<(pin * 4));
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <DIO_voidSetPinDirection+0x1a0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	7979      	ldrb	r1, [r7, #5]
 8001624:	79ba      	ldrb	r2, [r7, #6]
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	4611      	mov	r1, r2
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <DIO_voidSetPinDirection+0x1a0>)
 8001630:	430b      	orrs	r3, r1
 8001632:	6013      	str	r3, [r2, #0]
				break;
 8001634:	e000      	b.n	8001638 <DIO_voidSetPinDirection+0x180>
		}
 8001636:	bf00      	nop
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40010800 	.word	0x40010800
 8001648:	40010c00 	.word	0x40010c00
 800164c:	40011000 	.word	0x40011000
 8001650:	40010804 	.word	0x40010804
 8001654:	40010c04 	.word	0x40010c04
 8001658:	40011004 	.word	0x40011004

0800165c <DIO_voidSetPinValue>:
void	DIO_voidSetPinValue(u8 port, u8 pin, u8 Value)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
 8001666:	460b      	mov	r3, r1
 8001668:	71bb      	strb	r3, [r7, #6]
 800166a:	4613      	mov	r3, r2
 800166c:	717b      	strb	r3, [r7, #5]
	/*		Range Check 		*/
	if(port < 3 && pin < 16)
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d841      	bhi.n	80016f8 <DIO_voidSetPinValue+0x9c>
 8001674:	79bb      	ldrb	r3, [r7, #6]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	d83e      	bhi.n	80016f8 <DIO_voidSetPinValue+0x9c>
	{
		if(Value == GPIO_HIGH)
 800167a:	797b      	ldrb	r3, [r7, #5]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d11b      	bne.n	80016b8 <DIO_voidSetPinValue+0x5c>
		{
			switch(port)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d012      	beq.n	80016ac <DIO_voidSetPinValue+0x50>
 8001686:	2b02      	cmp	r3, #2
 8001688:	dc36      	bgt.n	80016f8 <DIO_voidSetPinValue+0x9c>
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <DIO_voidSetPinValue+0x38>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d006      	beq.n	80016a0 <DIO_voidSetPinValue+0x44>
			}			
		}
		
	}else{/*	Return Error	*/}
	
}
 8001692:	e031      	b.n	80016f8 <DIO_voidSetPinValue+0x9c>
				case	PORTA	:   GPIOA_BSRR=(1<<pin);	break;
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	2201      	movs	r2, #1
 8001698:	409a      	lsls	r2, r3
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <DIO_voidSetPinValue+0xa8>)
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e02b      	b.n	80016f8 <DIO_voidSetPinValue+0x9c>
				case	PORTB	:	GPIOB_BSRR=(1<<pin);	break;
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	2201      	movs	r2, #1
 80016a4:	409a      	lsls	r2, r3
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <DIO_voidSetPinValue+0xac>)
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e025      	b.n	80016f8 <DIO_voidSetPinValue+0x9c>
				case	PORTC	:	GPIOC_BSRR=(1<<pin);	break;
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	2201      	movs	r2, #1
 80016b0:	409a      	lsls	r2, r3
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <DIO_voidSetPinValue+0xb0>)
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e01f      	b.n	80016f8 <DIO_voidSetPinValue+0x9c>
		else if(Value == GPIO_LOW)
 80016b8:	797b      	ldrb	r3, [r7, #5]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d11b      	bne.n	80016f6 <DIO_voidSetPinValue+0x9a>
			switch(port)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d012      	beq.n	80016ea <DIO_voidSetPinValue+0x8e>
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	dc17      	bgt.n	80016f8 <DIO_voidSetPinValue+0x9c>
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <DIO_voidSetPinValue+0x76>
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d006      	beq.n	80016de <DIO_voidSetPinValue+0x82>
}
 80016d0:	e012      	b.n	80016f8 <DIO_voidSetPinValue+0x9c>
				case	PORTA	:	GPIOA_BRR=(1<<pin);	break;
 80016d2:	79bb      	ldrb	r3, [r7, #6]
 80016d4:	2201      	movs	r2, #1
 80016d6:	409a      	lsls	r2, r3
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <DIO_voidSetPinValue+0xb4>)
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e00c      	b.n	80016f8 <DIO_voidSetPinValue+0x9c>
				case	PORTB	:	GPIOB_BRR=(1<<pin);	break;
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	2201      	movs	r2, #1
 80016e2:	409a      	lsls	r2, r3
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <DIO_voidSetPinValue+0xb8>)
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e006      	b.n	80016f8 <DIO_voidSetPinValue+0x9c>
				case	PORTC	:	GPIOC_BRR=(1<<pin);	break;
 80016ea:	79bb      	ldrb	r3, [r7, #6]
 80016ec:	2201      	movs	r2, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <DIO_voidSetPinValue+0xbc>)
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e000      	b.n	80016f8 <DIO_voidSetPinValue+0x9c>
		}
 80016f6:	bf00      	nop
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40010810 	.word	0x40010810
 8001708:	40010c10 	.word	0x40010c10
 800170c:	40011010 	.word	0x40011010
 8001710:	40010814 	.word	0x40010814
 8001714:	40010c14 	.word	0x40010c14
 8001718:	40011014 	.word	0x40011014

0800171c <LED_init>:
#include "LED_interface.h"


 //initialize function

 void LED_init(u8 ledport  , u8 ledpin) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	460a      	mov	r2, r1
 8001726:	71fb      	strb	r3, [r7, #7]
 8001728:	4613      	mov	r3, r2
 800172a:	71bb      	strb	r3, [r7, #6]
	 DIO_voidSetPinDirection(ledport , ledpin, GPIO_OUTPUT_2MHZ_PP) ;
 800172c:	79b9      	ldrb	r1, [r7, #6]
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2202      	movs	r2, #2
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fec0 	bl	80014b8 <DIO_voidSetPinDirection>
 }
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <LED_on>:

 //function to on led

 void LED_on (u8 ledport  , u8 ledpin ) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	71bb      	strb	r3, [r7, #6]
	 DIO_voidSetPinValue(ledport ,ledpin , GPIO_HIGH) ;
 8001750:	79b9      	ldrb	r1, [r7, #6]
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2201      	movs	r2, #1
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff80 	bl	800165c <DIO_voidSetPinValue>

 }
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <LED_off>:

 //function to led off

void LED_off (u8 ledport , u8 ledpin ) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	4613      	mov	r3, r2
 8001772:	71bb      	strb	r3, [r7, #6]
	DIO_voidSetPinValue(ledport , ledpin ,GPIO_LOW) ;
 8001774:	79b9      	ldrb	r1, [r7, #6]
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2200      	movs	r2, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff6e 	bl	800165c <DIO_voidSetPinValue>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <LED_toggle>:

 //toggle led function

 void LED_toggle (u8 ledport , u8 ledpin ){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	460a      	mov	r2, r1
 8001792:	71fb      	strb	r3, [r7, #7]
 8001794:	4613      	mov	r3, r2
 8001796:	71bb      	strb	r3, [r7, #6]
	 LED_on(ledport,ledpin);
 8001798:	79ba      	ldrb	r2, [r7, #6]
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ffce 	bl	8001740 <LED_on>
	 _delay_ms(1000);
 80017a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a8:	f7ff fe6c 	bl	8001484 <_delay_ms>
	 LED_off(ledport  ,ledpin);
 80017ac:	79ba      	ldrb	r2, [r7, #6]
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ffd6 	bl	8001764 <LED_off>
 }
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <RCC_voidSysClkInt>:
#include	"RCC_interface.h"
#include	"RCC_private.h"
#include	"RCC_config.h"

void		RCC_voidSysClkInt(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	RCC_CR_HSE_ON;
	RCC_CFGR_SW_HSE1;
	RCC_CFGR_SW_HSE2;
	while (RCC_CR_HSE_ON_RDY == 0 );
#elif RCC_SYS_CLK == RCC_HSI
	RCC_CR_HSI_ON;
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <RCC_voidSysClkInt+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a16      	ldr	r2, [pc, #88]	; (8001824 <RCC_voidSysClkInt+0x64>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6013      	str	r3, [r2, #0]
	RCC_CFGR_SW_HSI1;
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <RCC_voidSysClkInt+0x68>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <RCC_voidSysClkInt+0x68>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]
	RCC_CFGR_SW_HSI2;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <RCC_voidSysClkInt+0x68>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a11      	ldr	r2, [pc, #68]	; (8001828 <RCC_voidSysClkInt+0x68>)
 80017e2:	f023 0302 	bic.w	r3, r3, #2
 80017e6:	6013      	str	r3, [r2, #0]
	while (RCC_CR_HSI_ON_RDY==0);
 80017e8:	bf00      	nop
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <RCC_voidSysClkInt+0x64>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f9      	beq.n	80017ea <RCC_voidSysClkInt+0x2a>
	WHILE(!(RCC_CFGR_SWS_PLL));
#else
		#error "Error wrong choice for CLK system"
#endif
#if     MCO == NO_CLK
	CLR_BIT(RCC_CFGR,24) ;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <RCC_voidSysClkInt+0x68>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <RCC_voidSysClkInt+0x68>)
 80017fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001800:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,25) ;
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <RCC_voidSysClkInt+0x68>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <RCC_voidSysClkInt+0x68>)
 8001808:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800180c:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,26) ;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <RCC_voidSysClkInt+0x68>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <RCC_voidSysClkInt+0x68>)
 8001814:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001818:	6013      	str	r3, [r2, #0]
	#error "wrong choose MCO "
#endif 


		
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	40021004 	.word	0x40021004

0800182c <RCC_voidEnablePerClk>:
void		RCC_voidEnablePerClk(u8 BusId , u8 PerId)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	460a      	mov	r2, r1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	4613      	mov	r3, r2
 800183a:	71bb      	strb	r3, [r7, #6]
	/*		Range Check							*/
	if(PerId < 32)
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	2b1f      	cmp	r3, #31
 8001840:	d82a      	bhi.n	8001898 <RCC_voidEnablePerClk+0x6c>
	{
		switch(BusId)
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d01c      	beq.n	8001882 <RCC_voidEnablePerClk+0x56>
 8001848:	2b02      	cmp	r3, #2
 800184a:	dc25      	bgt.n	8001898 <RCC_voidEnablePerClk+0x6c>
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <RCC_voidEnablePerClk+0x2a>
 8001850:	2b01      	cmp	r3, #1
 8001852:	d00b      	beq.n	800186c <RCC_voidEnablePerClk+0x40>
		}
		
	}
	else{	/*	Return Error "Out Of The Range"		*/	}
	
}
 8001854:	e020      	b.n	8001898 <RCC_voidEnablePerClk+0x6c>
			case	RCC_AHB		:	SET_BIT(RCC_AHBENR,PerId) ;	break;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <RCC_voidEnablePerClk+0x78>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	79ba      	ldrb	r2, [r7, #6]
 800185c:	2101      	movs	r1, #1
 800185e:	fa01 f202 	lsl.w	r2, r1, r2
 8001862:	4611      	mov	r1, r2
 8001864:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <RCC_voidEnablePerClk+0x78>)
 8001866:	430b      	orrs	r3, r1
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e015      	b.n	8001898 <RCC_voidEnablePerClk+0x6c>
			case	RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerId);	break;
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <RCC_voidEnablePerClk+0x7c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	79ba      	ldrb	r2, [r7, #6]
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	4611      	mov	r1, r2
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <RCC_voidEnablePerClk+0x7c>)
 800187c:	430b      	orrs	r3, r1
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e00a      	b.n	8001898 <RCC_voidEnablePerClk+0x6c>
			case	RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerId);	break;
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <RCC_voidEnablePerClk+0x80>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	79ba      	ldrb	r2, [r7, #6]
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	4611      	mov	r1, r2
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <RCC_voidEnablePerClk+0x80>)
 8001892:	430b      	orrs	r3, r1
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	bf00      	nop
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40021014 	.word	0x40021014
 80018a8:	4002101c 	.word	0x4002101c
 80018ac:	40021018 	.word	0x40021018

080018b0 <STK_voidInit>:

static	void	(*STK_CallBack)	(void)	=	NULL;
static	u8		STK_u8ModeOfInterval;

void	STK_voidInit()
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
		/*		RCC == HSI		*/
		#if		STK_CLK_SRC	==	STK_AHB_DIV_8
			STK->CTRL = 0x00000000;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <STK_voidInit+0x14>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
		#elif	STK_CLK_SRC	==	STK_AHB
			STK -> CTRL = 0x00000004;
		#else
			#error	"Wrong choice of SysTick Clock Source!"
		#endif
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <STK_voidSetBusyWait>:
void	STK_voidSetBusyWait(u32	Ticks)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	/*	Load ticks to Load Register 	*/
	STK -> LOAD = Ticks;
 80018d0:	4a10      	ldr	r2, [pc, #64]	; (8001914 <STK_voidSetBusyWait+0x4c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6053      	str	r3, [r2, #4]
	/*	Start the timer 				*/
	SET_BIT(STK->CTRL , 0);
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <STK_voidSetBusyWait+0x4c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <STK_voidSetBusyWait+0x4c>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6013      	str	r3, [r2, #0]
	/*	Wait till the flag is raised 	*/
	while((GET_BIT(STK -> CTRL , 16 ))==0)
 80018e2:	e000      	b.n	80018e6 <STK_voidSetBusyWait+0x1e>
	{
		asm("NOP");
 80018e4:	bf00      	nop
	while((GET_BIT(STK -> CTRL , 16 ))==0)
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <STK_voidSetBusyWait+0x4c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f8      	beq.n	80018e4 <STK_voidSetBusyWait+0x1c>
	}
	/*	Stop the timer					*/
	CLR_BIT(STK -> CTRL , 0);
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <STK_voidSetBusyWait+0x4c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <STK_voidSetBusyWait+0x4c>)
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	6013      	str	r3, [r2, #0]
	STK ->	LOAD	=	0;
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <STK_voidSetBusyWait+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
	STK ->	VAL		=	0;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <STK_voidSetBusyWait+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	e000e010 	.word	0xe000e010

08001918 <main>:

void	vRedLEDTask( void * pvParameters );
void	vGreenLEDTask( void * pvParameters );

int main(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af02      	add	r7, sp, #8
	RCC_voidSysClkInt();
 800191e:	f7ff ff4f 	bl	80017c0 <RCC_voidSysClkInt>
	RCC_voidEnablePerClk(RCC_APB2, 2);
 8001922:	2102      	movs	r1, #2
 8001924:	2002      	movs	r0, #2
 8001926:	f7ff ff81 	bl	800182c <RCC_voidEnablePerClk>
	LED_init(PORTA, PIN0);
 800192a:	2100      	movs	r1, #0
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff fef5 	bl	800171c <LED_init>
	LED_init(PORTA, PIN1);
 8001932:	2101      	movs	r1, #1
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff fef1 	bl	800171c <LED_init>
	/*Toggle pin*/
			LED_toggle(PORTA, PIN1);
 800193a:	2101      	movs	r1, #1
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff ff23 	bl	8001788 <LED_toggle>
			/*Periodicity*/
			STK_voidSetBusyWait(500);
 8001942:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001946:	f7ff ffbf 	bl	80018c8 <STK_voidSetBusyWait>
	STK_voidInit();
 800194a:	f7ff ffb1 	bl	80018b0 <STK_voidInit>
	xTaskCreate(vRedLEDTask, "Red LED Task", 128, NULL, 1, &xRedLEDTaskHandle);
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <main+0x64>)
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	2301      	movs	r3, #1
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	4909      	ldr	r1, [pc, #36]	; (8001980 <main+0x68>)
 800195c:	4809      	ldr	r0, [pc, #36]	; (8001984 <main+0x6c>)
 800195e:	f7fe fc93 	bl	8000288 <xTaskCreate>
	xTaskCreate(vGreenLEDTask, "Green LED Task", 128, NULL, 1, &xGreenLEDTaskHandle);
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <main+0x70>)
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	2301      	movs	r3, #1
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2300      	movs	r3, #0
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	4907      	ldr	r1, [pc, #28]	; (800198c <main+0x74>)
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <main+0x78>)
 8001972:	f7fe fc89 	bl	8000288 <xTaskCreate>

    // Start the real time scheduler.
    vTaskStartScheduler();
 8001976:	f7fe fe19 	bl	80005ac <vTaskStartScheduler>

    // Will not get here unless there is insufficient RAM.
	/* Loop forever */

	for(;;);
 800197a:	e7fe      	b.n	800197a <main+0x62>
 800197c:	2000214c 	.word	0x2000214c
 8001980:	08001a94 	.word	0x08001a94
 8001984:	08001995 	.word	0x08001995
 8001988:	20002150 	.word	0x20002150
 800198c:	08001aa4 	.word	0x08001aa4
 8001990:	080019af 	.word	0x080019af

08001994 <vRedLEDTask>:
}


void	vRedLEDTask( void * pvParameters )
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		/*Toggle pin*/
		LED_toggle(PORTA, PIN0);
 800199c:	2100      	movs	r1, #0
 800199e:	2000      	movs	r0, #0
 80019a0:	f7ff fef2 	bl	8001788 <LED_toggle>
		/*Periodicity*/
		vTaskDelay(700);
 80019a4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80019a8:	f7fe fdcc 	bl	8000544 <vTaskDelay>
		LED_toggle(PORTA, PIN0);
 80019ac:	e7f6      	b.n	800199c <vRedLEDTask+0x8>

080019ae <vGreenLEDTask>:
//		STK_busywait(500);
	}
}
void	vGreenLEDTask( void * pvParameters )
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		/*Toggle pin*/
				LED_toggle(PORTA, PIN1);
 80019b6:	2101      	movs	r1, #1
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff fee5 	bl	8001788 <LED_toggle>
				/*Periodicity*/
				vTaskDelay(500);
 80019be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019c2:	f7fe fdbf 	bl	8000544 <vTaskDelay>
				LED_toggle(PORTA, PIN1);
 80019c6:	e7f6      	b.n	80019b6 <vGreenLEDTask+0x8>

080019c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80019d2:	490d      	ldr	r1, [pc, #52]	; (8001a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <LoopForever+0xe>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e8:	4c0a      	ldr	r4, [pc, #40]	; (8001a14 <LoopForever+0x16>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019f6:	f000 f811 	bl	8001a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019fa:	f7ff ff8d 	bl	8001918 <main>

080019fe <LoopForever>:

LoopForever:
  b LoopForever
 80019fe:	e7fe      	b.n	80019fe <LoopForever>
  ldr   r0, =_estack
 8001a00:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001a0c:	08001abc 	.word	0x08001abc
  ldr r2, =_sbss
 8001a10:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001a14:	20002154 	.word	0x20002154

08001a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_2_IRQHandler>
	...

08001a1c <__libc_init_array>:
 8001a1c:	b570      	push	{r4, r5, r6, lr}
 8001a1e:	2600      	movs	r6, #0
 8001a20:	4d0c      	ldr	r5, [pc, #48]	; (8001a54 <__libc_init_array+0x38>)
 8001a22:	4c0d      	ldr	r4, [pc, #52]	; (8001a58 <__libc_init_array+0x3c>)
 8001a24:	1b64      	subs	r4, r4, r5
 8001a26:	10a4      	asrs	r4, r4, #2
 8001a28:	42a6      	cmp	r6, r4
 8001a2a:	d109      	bne.n	8001a40 <__libc_init_array+0x24>
 8001a2c:	f000 f822 	bl	8001a74 <_init>
 8001a30:	2600      	movs	r6, #0
 8001a32:	4d0a      	ldr	r5, [pc, #40]	; (8001a5c <__libc_init_array+0x40>)
 8001a34:	4c0a      	ldr	r4, [pc, #40]	; (8001a60 <__libc_init_array+0x44>)
 8001a36:	1b64      	subs	r4, r4, r5
 8001a38:	10a4      	asrs	r4, r4, #2
 8001a3a:	42a6      	cmp	r6, r4
 8001a3c:	d105      	bne.n	8001a4a <__libc_init_array+0x2e>
 8001a3e:	bd70      	pop	{r4, r5, r6, pc}
 8001a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a44:	4798      	blx	r3
 8001a46:	3601      	adds	r6, #1
 8001a48:	e7ee      	b.n	8001a28 <__libc_init_array+0xc>
 8001a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a4e:	4798      	blx	r3
 8001a50:	3601      	adds	r6, #1
 8001a52:	e7f2      	b.n	8001a3a <__libc_init_array+0x1e>
 8001a54:	08001ab4 	.word	0x08001ab4
 8001a58:	08001ab4 	.word	0x08001ab4
 8001a5c:	08001ab4 	.word	0x08001ab4
 8001a60:	08001ab8 	.word	0x08001ab8

08001a64 <memset>:
 8001a64:	4603      	mov	r3, r0
 8001a66:	4402      	add	r2, r0
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d100      	bne.n	8001a6e <memset+0xa>
 8001a6c:	4770      	bx	lr
 8001a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a72:	e7f9      	b.n	8001a68 <memset+0x4>

08001a74 <_init>:
 8001a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a76:	bf00      	nop
 8001a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a7a:	bc08      	pop	{r3}
 8001a7c:	469e      	mov	lr, r3
 8001a7e:	4770      	bx	lr

08001a80 <_fini>:
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a82:	bf00      	nop
 8001a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a86:	bc08      	pop	{r3}
 8001a88:	469e      	mov	lr, r3
 8001a8a:	4770      	bx	lr
