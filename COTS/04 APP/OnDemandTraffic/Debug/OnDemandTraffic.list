
OnDemandTraffic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001058  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001188  08001188  00011188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011a4  080011a4  000111ac  2**0
                  CONTENTS
  4 .ARM          00000000  080011a4  080011a4  000111ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011a4  080011ac  000111ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011a4  080011a4  000111a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011a8  080011a8  000111a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  080011ac  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  080011ac  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d7c  00000000  00000000  000111d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000068f  00000000  00000000  00011f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  000125e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00012790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e09  00000000  00000000  000128d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001395  00000000  00000000  000146e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007d70  00000000  00000000  00015a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001d7e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000508  00000000  00000000  0001d838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001170 	.word	0x08001170

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001170 	.word	0x08001170

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <DIO_voidSetPinDirection>:




void	DIO_voidSetPinDirection(u8 port, u8 pin, u8 Direction)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
 800018a:	460b      	mov	r3, r1
 800018c:	71bb      	strb	r3, [r7, #6]
 800018e:	4613      	mov	r3, r2
 8000190:	717b      	strb	r3, [r7, #5]
	/*		Range Check 		*/
	if(port < 3 && pin < 16)
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	2b02      	cmp	r3, #2
 8000196:	f200 80b3 	bhi.w	8000300 <DIO_voidSetPinDirection+0x180>
 800019a:	79bb      	ldrb	r3, [r7, #6]
 800019c:	2b0f      	cmp	r3, #15
 800019e:	f200 80af 	bhi.w	8000300 <DIO_voidSetPinDirection+0x180>
	{
		if(pin<8)	/*		Low	(PIN0:PIN7) CRL	*/
 80001a2:	79bb      	ldrb	r3, [r7, #6]
 80001a4:	2b07      	cmp	r3, #7
 80001a6:	d852      	bhi.n	800024e <DIO_voidSetPinDirection+0xce>
		{
			switch(port)
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2b02      	cmp	r3, #2
 80001ac:	d037      	beq.n	800021e <DIO_voidSetPinDirection+0x9e>
 80001ae:	2b02      	cmp	r3, #2
 80001b0:	f300 80a6 	bgt.w	8000300 <DIO_voidSetPinDirection+0x180>
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d002      	beq.n	80001be <DIO_voidSetPinDirection+0x3e>
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d018      	beq.n	80001ee <DIO_voidSetPinDirection+0x6e>
				break;
			}

		}
	}else{/*	Return Error	*/}
}
 80001bc:	e0a0      	b.n	8000300 <DIO_voidSetPinDirection+0x180>
					GPIOA_CRL &= ~((0b1111)<<(pin * 4));
 80001be:	4b53      	ldr	r3, [pc, #332]	; (800030c <DIO_voidSetPinDirection+0x18c>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	79ba      	ldrb	r2, [r7, #6]
 80001c4:	0092      	lsls	r2, r2, #2
 80001c6:	210f      	movs	r1, #15
 80001c8:	fa01 f202 	lsl.w	r2, r1, r2
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	4611      	mov	r1, r2
 80001d0:	4a4e      	ldr	r2, [pc, #312]	; (800030c <DIO_voidSetPinDirection+0x18c>)
 80001d2:	400b      	ands	r3, r1
 80001d4:	6013      	str	r3, [r2, #0]
					GPIOA_CRL |=  ((Direction)<<(pin * 4));
 80001d6:	4b4d      	ldr	r3, [pc, #308]	; (800030c <DIO_voidSetPinDirection+0x18c>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	7979      	ldrb	r1, [r7, #5]
 80001dc:	79ba      	ldrb	r2, [r7, #6]
 80001de:	0092      	lsls	r2, r2, #2
 80001e0:	fa01 f202 	lsl.w	r2, r1, r2
 80001e4:	4611      	mov	r1, r2
 80001e6:	4a49      	ldr	r2, [pc, #292]	; (800030c <DIO_voidSetPinDirection+0x18c>)
 80001e8:	430b      	orrs	r3, r1
 80001ea:	6013      	str	r3, [r2, #0]
				break;
 80001ec:	e088      	b.n	8000300 <DIO_voidSetPinDirection+0x180>
				GPIOB_CRL &= ~((0b1111)<<(pin * 4));
 80001ee:	4b48      	ldr	r3, [pc, #288]	; (8000310 <DIO_voidSetPinDirection+0x190>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	79ba      	ldrb	r2, [r7, #6]
 80001f4:	0092      	lsls	r2, r2, #2
 80001f6:	210f      	movs	r1, #15
 80001f8:	fa01 f202 	lsl.w	r2, r1, r2
 80001fc:	43d2      	mvns	r2, r2
 80001fe:	4611      	mov	r1, r2
 8000200:	4a43      	ldr	r2, [pc, #268]	; (8000310 <DIO_voidSetPinDirection+0x190>)
 8000202:	400b      	ands	r3, r1
 8000204:	6013      	str	r3, [r2, #0]
				GPIOB_CRL |=  ((Direction)<<(pin * 4));
 8000206:	4b42      	ldr	r3, [pc, #264]	; (8000310 <DIO_voidSetPinDirection+0x190>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	7979      	ldrb	r1, [r7, #5]
 800020c:	79ba      	ldrb	r2, [r7, #6]
 800020e:	0092      	lsls	r2, r2, #2
 8000210:	fa01 f202 	lsl.w	r2, r1, r2
 8000214:	4611      	mov	r1, r2
 8000216:	4a3e      	ldr	r2, [pc, #248]	; (8000310 <DIO_voidSetPinDirection+0x190>)
 8000218:	430b      	orrs	r3, r1
 800021a:	6013      	str	r3, [r2, #0]
				break;
 800021c:	e070      	b.n	8000300 <DIO_voidSetPinDirection+0x180>
				GPIOC_CRL &= ~((0b1111)<<(pin * 4));
 800021e:	4b3d      	ldr	r3, [pc, #244]	; (8000314 <DIO_voidSetPinDirection+0x194>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	79ba      	ldrb	r2, [r7, #6]
 8000224:	0092      	lsls	r2, r2, #2
 8000226:	210f      	movs	r1, #15
 8000228:	fa01 f202 	lsl.w	r2, r1, r2
 800022c:	43d2      	mvns	r2, r2
 800022e:	4611      	mov	r1, r2
 8000230:	4a38      	ldr	r2, [pc, #224]	; (8000314 <DIO_voidSetPinDirection+0x194>)
 8000232:	400b      	ands	r3, r1
 8000234:	6013      	str	r3, [r2, #0]
				GPIOC_CRL |=  ((Direction)<<(pin * 4));
 8000236:	4b37      	ldr	r3, [pc, #220]	; (8000314 <DIO_voidSetPinDirection+0x194>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	7979      	ldrb	r1, [r7, #5]
 800023c:	79ba      	ldrb	r2, [r7, #6]
 800023e:	0092      	lsls	r2, r2, #2
 8000240:	fa01 f202 	lsl.w	r2, r1, r2
 8000244:	4611      	mov	r1, r2
 8000246:	4a33      	ldr	r2, [pc, #204]	; (8000314 <DIO_voidSetPinDirection+0x194>)
 8000248:	430b      	orrs	r3, r1
 800024a:	6013      	str	r3, [r2, #0]
				break;
 800024c:	e058      	b.n	8000300 <DIO_voidSetPinDirection+0x180>
		}else if(pin<16)	/*		high	(pin8:PIN15) CRH	*/
 800024e:	79bb      	ldrb	r3, [r7, #6]
 8000250:	2b0f      	cmp	r3, #15
 8000252:	d854      	bhi.n	80002fe <DIO_voidSetPinDirection+0x17e>
			pin -= 8;
 8000254:	79bb      	ldrb	r3, [r7, #6]
 8000256:	3b08      	subs	r3, #8
 8000258:	71bb      	strb	r3, [r7, #6]
			switch(port)
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b02      	cmp	r3, #2
 800025e:	d036      	beq.n	80002ce <DIO_voidSetPinDirection+0x14e>
 8000260:	2b02      	cmp	r3, #2
 8000262:	dc4d      	bgt.n	8000300 <DIO_voidSetPinDirection+0x180>
 8000264:	2b00      	cmp	r3, #0
 8000266:	d002      	beq.n	800026e <DIO_voidSetPinDirection+0xee>
 8000268:	2b01      	cmp	r3, #1
 800026a:	d018      	beq.n	800029e <DIO_voidSetPinDirection+0x11e>
}
 800026c:	e048      	b.n	8000300 <DIO_voidSetPinDirection+0x180>
				GPIOA_CRH &= ~((0b1111)<<(pin * 4));
 800026e:	4b2a      	ldr	r3, [pc, #168]	; (8000318 <DIO_voidSetPinDirection+0x198>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	79ba      	ldrb	r2, [r7, #6]
 8000274:	0092      	lsls	r2, r2, #2
 8000276:	210f      	movs	r1, #15
 8000278:	fa01 f202 	lsl.w	r2, r1, r2
 800027c:	43d2      	mvns	r2, r2
 800027e:	4611      	mov	r1, r2
 8000280:	4a25      	ldr	r2, [pc, #148]	; (8000318 <DIO_voidSetPinDirection+0x198>)
 8000282:	400b      	ands	r3, r1
 8000284:	6013      	str	r3, [r2, #0]
				GPIOA_CRH |=  ((Direction)<<(pin * 4));
 8000286:	4b24      	ldr	r3, [pc, #144]	; (8000318 <DIO_voidSetPinDirection+0x198>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	7979      	ldrb	r1, [r7, #5]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	0092      	lsls	r2, r2, #2
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a20      	ldr	r2, [pc, #128]	; (8000318 <DIO_voidSetPinDirection+0x198>)
 8000298:	430b      	orrs	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
				break;
 800029c:	e030      	b.n	8000300 <DIO_voidSetPinDirection+0x180>
				GPIOB_CRH &= ~((0b1111)<<(pin * 4));
 800029e:	4b1f      	ldr	r3, [pc, #124]	; (800031c <DIO_voidSetPinDirection+0x19c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	79ba      	ldrb	r2, [r7, #6]
 80002a4:	0092      	lsls	r2, r2, #2
 80002a6:	210f      	movs	r1, #15
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	43d2      	mvns	r2, r2
 80002ae:	4611      	mov	r1, r2
 80002b0:	4a1a      	ldr	r2, [pc, #104]	; (800031c <DIO_voidSetPinDirection+0x19c>)
 80002b2:	400b      	ands	r3, r1
 80002b4:	6013      	str	r3, [r2, #0]
				GPIOB_CRH |=  ((Direction)<<(pin * 4));
 80002b6:	4b19      	ldr	r3, [pc, #100]	; (800031c <DIO_voidSetPinDirection+0x19c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	7979      	ldrb	r1, [r7, #5]
 80002bc:	79ba      	ldrb	r2, [r7, #6]
 80002be:	0092      	lsls	r2, r2, #2
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	4611      	mov	r1, r2
 80002c6:	4a15      	ldr	r2, [pc, #84]	; (800031c <DIO_voidSetPinDirection+0x19c>)
 80002c8:	430b      	orrs	r3, r1
 80002ca:	6013      	str	r3, [r2, #0]
				break;
 80002cc:	e018      	b.n	8000300 <DIO_voidSetPinDirection+0x180>
				GPIOC_CRH &= ~((0b1111)<<(pin * 4));
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <DIO_voidSetPinDirection+0x1a0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	79ba      	ldrb	r2, [r7, #6]
 80002d4:	0092      	lsls	r2, r2, #2
 80002d6:	210f      	movs	r1, #15
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	43d2      	mvns	r2, r2
 80002de:	4611      	mov	r1, r2
 80002e0:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <DIO_voidSetPinDirection+0x1a0>)
 80002e2:	400b      	ands	r3, r1
 80002e4:	6013      	str	r3, [r2, #0]
				GPIOC_CRH |=  ((Direction)<<(pin * 4));
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <DIO_voidSetPinDirection+0x1a0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	7979      	ldrb	r1, [r7, #5]
 80002ec:	79ba      	ldrb	r2, [r7, #6]
 80002ee:	0092      	lsls	r2, r2, #2
 80002f0:	fa01 f202 	lsl.w	r2, r1, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <DIO_voidSetPinDirection+0x1a0>)
 80002f8:	430b      	orrs	r3, r1
 80002fa:	6013      	str	r3, [r2, #0]
				break;
 80002fc:	e000      	b.n	8000300 <DIO_voidSetPinDirection+0x180>
		}
 80002fe:	bf00      	nop
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40010800 	.word	0x40010800
 8000310:	40010c00 	.word	0x40010c00
 8000314:	40011000 	.word	0x40011000
 8000318:	40010804 	.word	0x40010804
 800031c:	40010c04 	.word	0x40010c04
 8000320:	40011004 	.word	0x40011004

08000324 <DIO_voidSetPinValue>:
void	DIO_voidSetPinValue(u8 port, u8 pin, u8 Value)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
 800032e:	460b      	mov	r3, r1
 8000330:	71bb      	strb	r3, [r7, #6]
 8000332:	4613      	mov	r3, r2
 8000334:	717b      	strb	r3, [r7, #5]
	/*		Range Check 		*/
	if(port < 3 && pin < 16)
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2b02      	cmp	r3, #2
 800033a:	d841      	bhi.n	80003c0 <DIO_voidSetPinValue+0x9c>
 800033c:	79bb      	ldrb	r3, [r7, #6]
 800033e:	2b0f      	cmp	r3, #15
 8000340:	d83e      	bhi.n	80003c0 <DIO_voidSetPinValue+0x9c>
	{
		if(Value == GPIO_HIGH)
 8000342:	797b      	ldrb	r3, [r7, #5]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d11b      	bne.n	8000380 <DIO_voidSetPinValue+0x5c>
		{
			switch(port)
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	2b02      	cmp	r3, #2
 800034c:	d012      	beq.n	8000374 <DIO_voidSetPinValue+0x50>
 800034e:	2b02      	cmp	r3, #2
 8000350:	dc36      	bgt.n	80003c0 <DIO_voidSetPinValue+0x9c>
 8000352:	2b00      	cmp	r3, #0
 8000354:	d002      	beq.n	800035c <DIO_voidSetPinValue+0x38>
 8000356:	2b01      	cmp	r3, #1
 8000358:	d006      	beq.n	8000368 <DIO_voidSetPinValue+0x44>
			}			
		}
		
	}else{/*	Return Error	*/}
	
}
 800035a:	e031      	b.n	80003c0 <DIO_voidSetPinValue+0x9c>
				case	DIO_PORTA	:	GPIOA_BSRR= (1<<pin);   break;
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	2201      	movs	r2, #1
 8000360:	409a      	lsls	r2, r3
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <DIO_voidSetPinValue+0xa8>)
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	e02b      	b.n	80003c0 <DIO_voidSetPinValue+0x9c>
				case	DIO_PORTB	:	GPIOB_BSRR= (1<<pin);	break;
 8000368:	79bb      	ldrb	r3, [r7, #6]
 800036a:	2201      	movs	r2, #1
 800036c:	409a      	lsls	r2, r3
 800036e:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <DIO_voidSetPinValue+0xac>)
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	e025      	b.n	80003c0 <DIO_voidSetPinValue+0x9c>
				case	DIO_PORTC	:	GPIOC_BSRR= (1<<pin);	break;
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	2201      	movs	r2, #1
 8000378:	409a      	lsls	r2, r3
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <DIO_voidSetPinValue+0xb0>)
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	e01f      	b.n	80003c0 <DIO_voidSetPinValue+0x9c>
		else if(Value == GPIO_LOW)
 8000380:	797b      	ldrb	r3, [r7, #5]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d11b      	bne.n	80003be <DIO_voidSetPinValue+0x9a>
			switch(port)
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b02      	cmp	r3, #2
 800038a:	d012      	beq.n	80003b2 <DIO_voidSetPinValue+0x8e>
 800038c:	2b02      	cmp	r3, #2
 800038e:	dc17      	bgt.n	80003c0 <DIO_voidSetPinValue+0x9c>
 8000390:	2b00      	cmp	r3, #0
 8000392:	d002      	beq.n	800039a <DIO_voidSetPinValue+0x76>
 8000394:	2b01      	cmp	r3, #1
 8000396:	d006      	beq.n	80003a6 <DIO_voidSetPinValue+0x82>
}
 8000398:	e012      	b.n	80003c0 <DIO_voidSetPinValue+0x9c>
				case	DIO_PORTA	:	GPIOA_BRR= (1<<pin);	break;
 800039a:	79bb      	ldrb	r3, [r7, #6]
 800039c:	2201      	movs	r2, #1
 800039e:	409a      	lsls	r2, r3
 80003a0:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <DIO_voidSetPinValue+0xb4>)
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	e00c      	b.n	80003c0 <DIO_voidSetPinValue+0x9c>
				case	DIO_PORTB	:	GPIOB_BRR= (1<<pin);	break;
 80003a6:	79bb      	ldrb	r3, [r7, #6]
 80003a8:	2201      	movs	r2, #1
 80003aa:	409a      	lsls	r2, r3
 80003ac:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <DIO_voidSetPinValue+0xb8>)
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	e006      	b.n	80003c0 <DIO_voidSetPinValue+0x9c>
				case	DIO_PORTC	:	GPIOC_BRR= (1<<pin);	break;
 80003b2:	79bb      	ldrb	r3, [r7, #6]
 80003b4:	2201      	movs	r2, #1
 80003b6:	409a      	lsls	r2, r3
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <DIO_voidSetPinValue+0xbc>)
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	e000      	b.n	80003c0 <DIO_voidSetPinValue+0x9c>
		}
 80003be:	bf00      	nop
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40010810 	.word	0x40010810
 80003d0:	40010c10 	.word	0x40010c10
 80003d4:	40011010 	.word	0x40011010
 80003d8:	40010814 	.word	0x40010814
 80003dc:	40010c14 	.word	0x40010c14
 80003e0:	40011014 	.word	0x40011014

080003e4 <EXTI_voidInit>:
//static	void	(*EXTI0_CallBack) (void)	= NULL;



void		EXTI_voidInit(u8 EXTI_line ,u8 line_PORT)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	460a      	mov	r2, r1
 80003ee:	71fb      	strb	r3, [r7, #7]
 80003f0:	4613      	mov	r3, r2
 80003f2:	71bb      	strb	r3, [r7, #6]
//			AFIO_EXTICR4=0x2220 ;
//	#else
//	#error  "Error chose wrong Port"
//	#endif

switch (line_PORT)
 80003f4:	79bb      	ldrb	r3, [r7, #6]
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	f000 80b4 	beq.w	8000564 <EXTI_voidInit+0x180>
 80003fc:	2b02      	cmp	r3, #2
 80003fe:	f300 8107 	bgt.w	8000610 <EXTI_voidInit+0x22c>
 8000402:	2b00      	cmp	r3, #0
 8000404:	d002      	beq.n	800040c <EXTI_voidInit+0x28>
 8000406:	2b01      	cmp	r3, #1
 8000408:	d056      	beq.n	80004b8 <EXTI_voidInit+0xd4>
		case EXTI_14:		AFIO_EXTICR4  =  0x0010;
		case EXTI_15:		AFIO_EXTICR4  =  0x0010;
		}
}

}
 800040a:	e101      	b.n	8000610 <EXTI_voidInit+0x22c>
		switch (EXTI_line)
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	2b0f      	cmp	r3, #15
 8000410:	d852      	bhi.n	80004b8 <EXTI_voidInit+0xd4>
 8000412:	a201      	add	r2, pc, #4	; (adr r2, 8000418 <EXTI_voidInit+0x34>)
 8000414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000418:	08000459 	.word	0x08000459
 800041c:	0800045f 	.word	0x0800045f
 8000420:	08000465 	.word	0x08000465
 8000424:	0800046b 	.word	0x0800046b
 8000428:	08000471 	.word	0x08000471
 800042c:	08000477 	.word	0x08000477
 8000430:	0800047d 	.word	0x0800047d
 8000434:	08000483 	.word	0x08000483
 8000438:	08000489 	.word	0x08000489
 800043c:	0800048f 	.word	0x0800048f
 8000440:	08000495 	.word	0x08000495
 8000444:	0800049b 	.word	0x0800049b
 8000448:	080004a1 	.word	0x080004a1
 800044c:	080004a7 	.word	0x080004a7
 8000450:	080004ad 	.word	0x080004ad
 8000454:	080004b3 	.word	0x080004b3
			case EXTI0:			AFIO_EXTICR1  =  0x0000;
 8000458:	4b70      	ldr	r3, [pc, #448]	; (800061c <EXTI_voidInit+0x238>)
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
			case EXTI_1:		AFIO_EXTICR1  =  0x0000;
 800045e:	4b6f      	ldr	r3, [pc, #444]	; (800061c <EXTI_voidInit+0x238>)
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
			case EXTI_2:		AFIO_EXTICR1  =  0x0000;
 8000464:	4b6d      	ldr	r3, [pc, #436]	; (800061c <EXTI_voidInit+0x238>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
			case EXTI_3:		AFIO_EXTICR1  =  0x0000;
 800046a:	4b6c      	ldr	r3, [pc, #432]	; (800061c <EXTI_voidInit+0x238>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
			case EXTI_4:		AFIO_EXTICR2  =  0x0000;
 8000470:	4b6b      	ldr	r3, [pc, #428]	; (8000620 <EXTI_voidInit+0x23c>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
			case EXTI_5:		AFIO_EXTICR2  =  0x0000;
 8000476:	4b6a      	ldr	r3, [pc, #424]	; (8000620 <EXTI_voidInit+0x23c>)
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
			case EXTI_6:		AFIO_EXTICR2  =  0x0000;
 800047c:	4b68      	ldr	r3, [pc, #416]	; (8000620 <EXTI_voidInit+0x23c>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
			case EXTI_7:		AFIO_EXTICR2  =  0x0000;
 8000482:	4b67      	ldr	r3, [pc, #412]	; (8000620 <EXTI_voidInit+0x23c>)
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
			case EXTI_8:		AFIO_EXTICR3  =  0x0000;
 8000488:	4b66      	ldr	r3, [pc, #408]	; (8000624 <EXTI_voidInit+0x240>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
			case EXTI_9:		AFIO_EXTICR3  =  0x0000;
 800048e:	4b65      	ldr	r3, [pc, #404]	; (8000624 <EXTI_voidInit+0x240>)
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
			case EXTI_10:		AFIO_EXTICR3  =  0x0000;
 8000494:	4b63      	ldr	r3, [pc, #396]	; (8000624 <EXTI_voidInit+0x240>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
			case EXTI_11:		AFIO_EXTICR3  =  0x0000;
 800049a:	4b62      	ldr	r3, [pc, #392]	; (8000624 <EXTI_voidInit+0x240>)
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
			case EXTI_12:		AFIO_EXTICR4  =  0x0000;
 80004a0:	4b61      	ldr	r3, [pc, #388]	; (8000628 <EXTI_voidInit+0x244>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
			case EXTI_13:		AFIO_EXTICR4  =  0x0000;
 80004a6:	4b60      	ldr	r3, [pc, #384]	; (8000628 <EXTI_voidInit+0x244>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
			case EXTI_14:		AFIO_EXTICR4  =  0x0000;
 80004ac:	4b5e      	ldr	r3, [pc, #376]	; (8000628 <EXTI_voidInit+0x244>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
			case EXTI_15:		AFIO_EXTICR4  =  0x0000;
 80004b2:	4b5d      	ldr	r3, [pc, #372]	; (8000628 <EXTI_voidInit+0x244>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
		switch (EXTI_line)
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	2b0f      	cmp	r3, #15
 80004bc:	d852      	bhi.n	8000564 <EXTI_voidInit+0x180>
 80004be:	a201      	add	r2, pc, #4	; (adr r2, 80004c4 <EXTI_voidInit+0xe0>)
 80004c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c4:	08000505 	.word	0x08000505
 80004c8:	0800050b 	.word	0x0800050b
 80004cc:	08000511 	.word	0x08000511
 80004d0:	08000517 	.word	0x08000517
 80004d4:	0800051d 	.word	0x0800051d
 80004d8:	08000523 	.word	0x08000523
 80004dc:	08000529 	.word	0x08000529
 80004e0:	0800052f 	.word	0x0800052f
 80004e4:	08000535 	.word	0x08000535
 80004e8:	0800053b 	.word	0x0800053b
 80004ec:	08000541 	.word	0x08000541
 80004f0:	08000547 	.word	0x08000547
 80004f4:	0800054d 	.word	0x0800054d
 80004f8:	08000553 	.word	0x08000553
 80004fc:	08000559 	.word	0x08000559
 8000500:	0800055f 	.word	0x0800055f
		case EXTI0:			AFIO_EXTICR1  =  0x0001;
 8000504:	4b45      	ldr	r3, [pc, #276]	; (800061c <EXTI_voidInit+0x238>)
 8000506:	2201      	movs	r2, #1
 8000508:	601a      	str	r2, [r3, #0]
		case EXTI_1:		AFIO_EXTICR1  =  0x0001;
 800050a:	4b44      	ldr	r3, [pc, #272]	; (800061c <EXTI_voidInit+0x238>)
 800050c:	2201      	movs	r2, #1
 800050e:	601a      	str	r2, [r3, #0]
		case EXTI_2:		AFIO_EXTICR1  =  0x0001;
 8000510:	4b42      	ldr	r3, [pc, #264]	; (800061c <EXTI_voidInit+0x238>)
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]
		case EXTI_3:		AFIO_EXTICR1  =  0x0001;
 8000516:	4b41      	ldr	r3, [pc, #260]	; (800061c <EXTI_voidInit+0x238>)
 8000518:	2201      	movs	r2, #1
 800051a:	601a      	str	r2, [r3, #0]
		case EXTI_4:		AFIO_EXTICR2  =  0x0001;
 800051c:	4b40      	ldr	r3, [pc, #256]	; (8000620 <EXTI_voidInit+0x23c>)
 800051e:	2201      	movs	r2, #1
 8000520:	601a      	str	r2, [r3, #0]
		case EXTI_5:		AFIO_EXTICR2  =  0x0001;
 8000522:	4b3f      	ldr	r3, [pc, #252]	; (8000620 <EXTI_voidInit+0x23c>)
 8000524:	2201      	movs	r2, #1
 8000526:	601a      	str	r2, [r3, #0]
		case EXTI_6:		AFIO_EXTICR2  =  0x0001;
 8000528:	4b3d      	ldr	r3, [pc, #244]	; (8000620 <EXTI_voidInit+0x23c>)
 800052a:	2201      	movs	r2, #1
 800052c:	601a      	str	r2, [r3, #0]
		case EXTI_7:		AFIO_EXTICR2  =  0x0001;
 800052e:	4b3c      	ldr	r3, [pc, #240]	; (8000620 <EXTI_voidInit+0x23c>)
 8000530:	2201      	movs	r2, #1
 8000532:	601a      	str	r2, [r3, #0]
		case EXTI_8:		AFIO_EXTICR3  =  0x0001;
 8000534:	4b3b      	ldr	r3, [pc, #236]	; (8000624 <EXTI_voidInit+0x240>)
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]
		case EXTI_9:		AFIO_EXTICR3  =  0x0001;
 800053a:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <EXTI_voidInit+0x240>)
 800053c:	2201      	movs	r2, #1
 800053e:	601a      	str	r2, [r3, #0]
		case EXTI_10:		AFIO_EXTICR3  =  0x0001;
 8000540:	4b38      	ldr	r3, [pc, #224]	; (8000624 <EXTI_voidInit+0x240>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]
		case EXTI_11:		AFIO_EXTICR3  =  0x0001;
 8000546:	4b37      	ldr	r3, [pc, #220]	; (8000624 <EXTI_voidInit+0x240>)
 8000548:	2201      	movs	r2, #1
 800054a:	601a      	str	r2, [r3, #0]
		case EXTI_12:		AFIO_EXTICR4  =  0x0001;
 800054c:	4b36      	ldr	r3, [pc, #216]	; (8000628 <EXTI_voidInit+0x244>)
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
		case EXTI_13:		AFIO_EXTICR4  =  0x0001;
 8000552:	4b35      	ldr	r3, [pc, #212]	; (8000628 <EXTI_voidInit+0x244>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
		case EXTI_14:		AFIO_EXTICR4  =  0x0001;
 8000558:	4b33      	ldr	r3, [pc, #204]	; (8000628 <EXTI_voidInit+0x244>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
		case EXTI_15:		AFIO_EXTICR4  =  0x0001;
 800055e:	4b32      	ldr	r3, [pc, #200]	; (8000628 <EXTI_voidInit+0x244>)
 8000560:	2201      	movs	r2, #1
 8000562:	601a      	str	r2, [r3, #0]
		switch (EXTI_line)
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b0f      	cmp	r3, #15
 8000568:	d852      	bhi.n	8000610 <EXTI_voidInit+0x22c>
 800056a:	a201      	add	r2, pc, #4	; (adr r2, 8000570 <EXTI_voidInit+0x18c>)
 800056c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000570:	080005b1 	.word	0x080005b1
 8000574:	080005b7 	.word	0x080005b7
 8000578:	080005bd 	.word	0x080005bd
 800057c:	080005c3 	.word	0x080005c3
 8000580:	080005c9 	.word	0x080005c9
 8000584:	080005cf 	.word	0x080005cf
 8000588:	080005d5 	.word	0x080005d5
 800058c:	080005db 	.word	0x080005db
 8000590:	080005e1 	.word	0x080005e1
 8000594:	080005e7 	.word	0x080005e7
 8000598:	080005ed 	.word	0x080005ed
 800059c:	080005f3 	.word	0x080005f3
 80005a0:	080005f9 	.word	0x080005f9
 80005a4:	080005ff 	.word	0x080005ff
 80005a8:	08000605 	.word	0x08000605
 80005ac:	0800060b 	.word	0x0800060b
		case EXTI0:			AFIO_EXTICR1  =  0x0010;
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <EXTI_voidInit+0x238>)
 80005b2:	2210      	movs	r2, #16
 80005b4:	601a      	str	r2, [r3, #0]
		case EXTI_1:		AFIO_EXTICR1  =  0x0010;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <EXTI_voidInit+0x238>)
 80005b8:	2210      	movs	r2, #16
 80005ba:	601a      	str	r2, [r3, #0]
		case EXTI_2:		AFIO_EXTICR1  =  0x0010;
 80005bc:	4b17      	ldr	r3, [pc, #92]	; (800061c <EXTI_voidInit+0x238>)
 80005be:	2210      	movs	r2, #16
 80005c0:	601a      	str	r2, [r3, #0]
		case EXTI_3:		AFIO_EXTICR1  =  0x0010;
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <EXTI_voidInit+0x238>)
 80005c4:	2210      	movs	r2, #16
 80005c6:	601a      	str	r2, [r3, #0]
		case EXTI_4:		AFIO_EXTICR2  =  0x0010;
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <EXTI_voidInit+0x23c>)
 80005ca:	2210      	movs	r2, #16
 80005cc:	601a      	str	r2, [r3, #0]
		case EXTI_5:		AFIO_EXTICR2  =  0x0010;
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <EXTI_voidInit+0x23c>)
 80005d0:	2210      	movs	r2, #16
 80005d2:	601a      	str	r2, [r3, #0]
		case EXTI_6:		AFIO_EXTICR2  =  0x0010;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <EXTI_voidInit+0x23c>)
 80005d6:	2210      	movs	r2, #16
 80005d8:	601a      	str	r2, [r3, #0]
		case EXTI_7:		AFIO_EXTICR2  =  0x0010;
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <EXTI_voidInit+0x23c>)
 80005dc:	2210      	movs	r2, #16
 80005de:	601a      	str	r2, [r3, #0]
		case EXTI_8:		AFIO_EXTICR3  =  0x0010;
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <EXTI_voidInit+0x240>)
 80005e2:	2210      	movs	r2, #16
 80005e4:	601a      	str	r2, [r3, #0]
		case EXTI_9:		AFIO_EXTICR3  =  0x0010;
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <EXTI_voidInit+0x240>)
 80005e8:	2210      	movs	r2, #16
 80005ea:	601a      	str	r2, [r3, #0]
		case EXTI_10:		AFIO_EXTICR3  =  0x0010;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <EXTI_voidInit+0x240>)
 80005ee:	2210      	movs	r2, #16
 80005f0:	601a      	str	r2, [r3, #0]
		case EXTI_11:		AFIO_EXTICR3  =  0x0010;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <EXTI_voidInit+0x240>)
 80005f4:	2210      	movs	r2, #16
 80005f6:	601a      	str	r2, [r3, #0]
		case EXTI_12:		AFIO_EXTICR4  =  0x0010;
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <EXTI_voidInit+0x244>)
 80005fa:	2210      	movs	r2, #16
 80005fc:	601a      	str	r2, [r3, #0]
		case EXTI_13:		AFIO_EXTICR4  =  0x0010;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <EXTI_voidInit+0x244>)
 8000600:	2210      	movs	r2, #16
 8000602:	601a      	str	r2, [r3, #0]
		case EXTI_14:		AFIO_EXTICR4  =  0x0010;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <EXTI_voidInit+0x244>)
 8000606:	2210      	movs	r2, #16
 8000608:	601a      	str	r2, [r3, #0]
		case EXTI_15:		AFIO_EXTICR4  =  0x0010;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <EXTI_voidInit+0x244>)
 800060c:	2210      	movs	r2, #16
 800060e:	601a      	str	r2, [r3, #0]
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40010008 	.word	0x40010008
 8000620:	4001000c 	.word	0x4001000c
 8000624:	40010010 	.word	0x40010010
 8000628:	40010014 	.word	0x40010014

0800062c <EXTI_voidEnableInt>:


void		EXTI_voidEnableInt(u8 EXTI_line)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
	//set
	(EXTI -> IMR) |= (1<<EXTI_line);   /*Int Mask Register*/
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <EXTI_voidEnableInt+0x28>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	2101      	movs	r1, #1
 800063e:	fa01 f202 	lsl.w	r2, r1, r2
 8000642:	4611      	mov	r1, r2
 8000644:	4a03      	ldr	r2, [pc, #12]	; (8000654 <EXTI_voidEnableInt+0x28>)
 8000646:	430b      	orrs	r3, r1
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40010400 	.word	0x40010400

08000658 <EXTI_voidChangeSenseMode>:
	EXTI -> SWIER |= (1<<EXTI_line);
}


void		EXTI_voidChangeSenseMode(u8 EXTI_line, u8 Sense_Mode)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	460a      	mov	r2, r1
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	4613      	mov	r3, r2
 8000666:	71bb      	strb	r3, [r7, #6]
	switch(Sense_Mode)
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d031      	beq.n	80006d2 <EXTI_voidChangeSenseMode+0x7a>
 800066e:	2b02      	cmp	r3, #2
 8000670:	dc44      	bgt.n	80006fc <EXTI_voidChangeSenseMode+0xa4>
 8000672:	2b00      	cmp	r3, #0
 8000674:	d017      	beq.n	80006a6 <EXTI_voidChangeSenseMode+0x4e>
 8000676:	2b01      	cmp	r3, #1
 8000678:	d140      	bne.n	80006fc <EXTI_voidChangeSenseMode+0xa4>
	{
		case	RISING_EDGE		:
									EXTI -> RTSR |=  (1<<EXTI_line);
 800067a:	4b28      	ldr	r3, [pc, #160]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	79fa      	ldrb	r2, [r7, #7]
 8000680:	2101      	movs	r1, #1
 8000682:	fa01 f202 	lsl.w	r2, r1, r2
 8000686:	4611      	mov	r1, r2
 8000688:	4a24      	ldr	r2, [pc, #144]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 800068a:	430b      	orrs	r3, r1
 800068c:	6093      	str	r3, [r2, #8]
									EXTI -> FTSR &= ~(1<<EXTI_line);	    break;
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	79fa      	ldrb	r2, [r7, #7]
 8000694:	2101      	movs	r1, #1
 8000696:	fa01 f202 	lsl.w	r2, r1, r2
 800069a:	43d2      	mvns	r2, r2
 800069c:	4611      	mov	r1, r2
 800069e:	4a1f      	ldr	r2, [pc, #124]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 80006a0:	400b      	ands	r3, r1
 80006a2:	60d3      	str	r3, [r2, #12]
 80006a4:	e02a      	b.n	80006fc <EXTI_voidChangeSenseMode+0xa4>
		case	FALLING_EDGE	:
									EXTI -> FTSR |=  (1<<EXTI_line);
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	2101      	movs	r1, #1
 80006ae:	fa01 f202 	lsl.w	r2, r1, r2
 80006b2:	4611      	mov	r1, r2
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 80006b6:	430b      	orrs	r3, r1
 80006b8:	60d3      	str	r3, [r2, #12]
									EXTI -> RTSR &= ~(1<<EXTI_line);    	break;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	2101      	movs	r1, #1
 80006c2:	fa01 f202 	lsl.w	r2, r1, r2
 80006c6:	43d2      	mvns	r2, r2
 80006c8:	4611      	mov	r1, r2
 80006ca:	4a14      	ldr	r2, [pc, #80]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 80006cc:	400b      	ands	r3, r1
 80006ce:	6093      	str	r3, [r2, #8]
 80006d0:	e014      	b.n	80006fc <EXTI_voidChangeSenseMode+0xa4>

		case	IOC				:
									EXTI -> RTSR |= (1<<EXTI_line);
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	2101      	movs	r1, #1
 80006da:	fa01 f202 	lsl.w	r2, r1, r2
 80006de:	4611      	mov	r1, r2
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 80006e2:	430b      	orrs	r3, r1
 80006e4:	6093      	str	r3, [r2, #8]
									EXTI -> FTSR |= (1<<EXTI_line);			break;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	79fa      	ldrb	r2, [r7, #7]
 80006ec:	2101      	movs	r1, #1
 80006ee:	fa01 f202 	lsl.w	r2, r1, r2
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a09      	ldr	r2, [pc, #36]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	60d3      	str	r3, [r2, #12]
 80006fa:	bf00      	nop

	}


	EXTI -> IMR |= (1<<EXTI_line);  //enable for INT tani bs daman msh aktr
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	79fa      	ldrb	r2, [r7, #7]
 8000702:	2101      	movs	r1, #1
 8000704:	fa01 f202 	lsl.w	r2, r1, r2
 8000708:	4611      	mov	r1, r2
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <EXTI_voidChangeSenseMode+0xc4>)
 800070c:	430b      	orrs	r3, r1
 800070e:	6013      	str	r3, [r2, #0]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40010400 	.word	0x40010400

08000720 <EXTI_voidSetCallBack>:

void		EXTI_voidSetCallBack(void (*Fptr)(void), u8 ID_EXTI)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	70fb      	strb	r3, [r7, #3]
	if(Fptr != NULL)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d004      	beq.n	800073c <EXTI_voidSetCallBack+0x1c>
	{
		EXTI_CallBack[ID_EXTI] = Fptr;
 8000732:	78fb      	ldrb	r3, [r7, #3]
 8000734:	4904      	ldr	r1, [pc, #16]	; (8000748 <EXTI_voidSetCallBack+0x28>)
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	2000001c 	.word	0x2000001c

0800074c <EXTI0_IRQHandler>:



void	EXTI0_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0


	if(EXTI_CallBack[0] !=NULL)
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <EXTI0_IRQHandler+0x24>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d008      	beq.n	800076a <EXTI0_IRQHandler+0x1e>
	{
		   EXTI_CallBack[0]();
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <EXTI0_IRQHandler+0x24>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4798      	blx	r3
			/*	Clear EXTI0 Flag	to not repeat INT*/
			EXTI->PR |= (1<<EXTI0); //EXTI0 so put bit 0
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <EXTI0_IRQHandler+0x28>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a04      	ldr	r2, [pc, #16]	; (8000774 <EXTI0_IRQHandler+0x28>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6153      	str	r3, [r2, #20]
//		_delay_ms(500);




}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000001c 	.word	0x2000001c
 8000774:	40010400 	.word	0x40010400

08000778 <LCD_enuInit>:
#include "LCD_priv.h"



ES_t LCD_enuInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
	ES_t local_u8ErrorState = ES_NOK;
 800077e:	2300      	movs	r3, #0
 8000780:	71fb      	strb	r3, [r7, #7]


/*Define direction for control PINS*/
	DIO_voidSetPinDirection(RS_PORT, RS_PIN, GPIO_OUTPUT_2MHZ_PP);
 8000782:	2202      	movs	r2, #2
 8000784:	210d      	movs	r1, #13
 8000786:	2002      	movs	r0, #2
 8000788:	f7ff fcfa 	bl	8000180 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(RW_PORT, RW_PIN, GPIO_OUTPUT_2MHZ_PP);
 800078c:	2202      	movs	r2, #2
 800078e:	210e      	movs	r1, #14
 8000790:	2002      	movs	r0, #2
 8000792:	f7ff fcf5 	bl	8000180 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(EN_PORT, EN_PIN, GPIO_OUTPUT_2MHZ_PP);
 8000796:	2202      	movs	r2, #2
 8000798:	210f      	movs	r1, #15
 800079a:	2002      	movs	r0, #2
 800079c:	f7ff fcf0 	bl	8000180 <DIO_voidSetPinDirection>

#if LCD_MODE == BIT_4
    /*Define Direction for Data PINS*/
	DIO_voidSetPinDirection(LCD_Data_PORT,LCD_D4 , GPIO_OUTPUT_2MHZ_PP);
 80007a0:	2202      	movs	r2, #2
 80007a2:	2104      	movs	r1, #4
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff fceb 	bl	8000180 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,LCD_D5 , GPIO_OUTPUT_2MHZ_PP);
 80007aa:	2202      	movs	r2, #2
 80007ac:	2105      	movs	r1, #5
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff fce6 	bl	8000180 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,LCD_D6 , GPIO_OUTPUT_2MHZ_PP);
 80007b4:	2202      	movs	r2, #2
 80007b6:	2106      	movs	r1, #6
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff fce1 	bl	8000180 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,LCD_D7 , GPIO_OUTPUT_2MHZ_PP);
 80007be:	2202      	movs	r2, #2
 80007c0:	2107      	movs	r1, #7
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff fcdc 	bl	8000180 <DIO_voidSetPinDirection>

	/*!comment: Delay more than 30ms*/
	_delay_ms(40);
 80007c8:	2028      	movs	r0, #40	; 0x28
 80007ca:	f000 fa13 	bl	8000bf4 <_delay_ms>
	/*Function Set for 4_BIT MODE  */
	LCD_enuSendCommand(FUNC_SET_BIT_4);
 80007ce:	2028      	movs	r0, #40	; 0x28
 80007d0:	f000 f818 	bl	8000804 <LCD_enuSendCommand>
	/*Function Set for 8_BIT MODE  */
	LCD_enuSendCommand(FUNC_SET_BIT_8);
#endif
	/*commands for 4 bit will be same as 8 bit and will be shifted in command function bit by bit*/

		_delay_ms(20);
 80007d4:	2014      	movs	r0, #20
 80007d6:	f000 fa0d 	bl	8000bf4 <_delay_ms>
	/*for Display on and  cursor off blinking>>0x0C or Display on and  cursor on blinking 0x0E */
		LCD_enuSendCommand(0x0C);
 80007da:	200c      	movs	r0, #12
 80007dc:	f000 f812 	bl	8000804 <LCD_enuSendCommand>
		_delay_ms(20);
 80007e0:	2014      	movs	r0, #20
 80007e2:	f000 fa07 	bl	8000bf4 <_delay_ms>
		/*set entry mode*/
		LCD_enuSendCommand(0x06);
 80007e6:	2006      	movs	r0, #6
 80007e8:	f000 f80c 	bl	8000804 <LCD_enuSendCommand>
	/*Display Clear*/
		LCD_enuSendCommand(0x01);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f000 f809 	bl	8000804 <LCD_enuSendCommand>
		_delay_ms(20);
 80007f2:	2014      	movs	r0, #20
 80007f4:	f000 f9fe 	bl	8000bf4 <_delay_ms>


	return local_u8ErrorState;
 80007f8:	79fb      	ldrb	r3, [r7, #7]


}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <LCD_enuSendCommand>:
/****************************************************************************************************/

ES_t LCD_enuSendCommand(u8 copy_u8Command)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
	ES_t local_u8ErrorState = ES_NOK;
 800080e:	2300      	movs	r3, #0
 8000810:	75fb      	strb	r3, [r7, #23]

	u8 local_LCD_PINS[8]={LCD_D0, LCD_D1, LCD_D2,LCD_D3,LCD_D4,LCD_D5,LCD_D6,LCD_D7};
 8000812:	4a3c      	ldr	r2, [pc, #240]	; (8000904 <LCD_enuSendCommand+0x100>)
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	e892 0003 	ldmia.w	r2, {r0, r1}
 800081c:	e883 0003 	stmia.w	r3, {r0, r1}

	DIO_voidSetPinValue(RS_PORT, RS_PIN, GPIO_LOW);
 8000820:	2200      	movs	r2, #0
 8000822:	210d      	movs	r1, #13
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff fd7d 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(RW_PORT, RW_PIN, GPIO_LOW);
 800082a:	2200      	movs	r2, #0
 800082c:	210e      	movs	r1, #14
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff fd78 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(EN_PORT, EN_PIN, GPIO_LOW);
 8000834:	2200      	movs	r2, #0
 8000836:	210f      	movs	r1, #15
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff fd73 	bl	8000324 <DIO_voidSetPinValue>
#if LCD_MODE == BIT_4
	/*send 4 high bits*/
	for (int i=0;i<4;i++)
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
 8000842:	e015      	b.n	8000870 <LCD_enuSendCommand+0x6c>
	{
		DIO_voidSetPinValue(LCD_Data_PORT,local_LCD_PINS[i+4], ((copy_u8Command>>(i+4) ) & 1)	 );
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	3304      	adds	r3, #4
 8000848:	3320      	adds	r3, #32
 800084a:	443b      	add	r3, r7
 800084c:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8000850:	79fa      	ldrb	r2, [r7, #7]
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3304      	adds	r3, #4
 8000856:	fa42 f303 	asr.w	r3, r2, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fd5d 	bl	8000324 <DIO_voidSetPinValue>
	for (int i=0;i<4;i++)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3301      	adds	r3, #1
 800086e:	61fb      	str	r3, [r7, #28]
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	2b03      	cmp	r3, #3
 8000874:	dde6      	ble.n	8000844 <LCD_enuSendCommand+0x40>
	}

	/*Latch 1.high and low  2.set data  3.high and low */
	DIO_voidSetPinValue(EN_PORT,EN_PIN, GPIO_HIGH);
 8000876:	2201      	movs	r2, #1
 8000878:	210f      	movs	r1, #15
 800087a:	2002      	movs	r0, #2
 800087c:	f7ff fd52 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f000 f9b7 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(EN_PORT,EN_PIN, GPIO_LOW);
 8000886:	2200      	movs	r2, #0
 8000888:	210f      	movs	r1, #15
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff fd4a 	bl	8000324 <DIO_voidSetPinValue>
	/*send 4 low bits*/
	for (int i=0;i<4;i++)
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	e014      	b.n	80008c0 <LCD_enuSendCommand+0xbc>
	{
		DIO_voidSetPinValue(LCD_Data_PORT,local_LCD_PINS[i+4], ((copy_u8Command>>i ) & 1) );
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	3304      	adds	r3, #4
 800089a:	3320      	adds	r3, #32
 800089c:	443b      	add	r3, r7
 800089e:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	fa42 f303 	asr.w	r3, r2, r3
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fd35 	bl	8000324 <DIO_voidSetPinValue>
	for (int i=0;i<4;i++)
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	3301      	adds	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	dde7      	ble.n	8000896 <LCD_enuSendCommand+0x92>
	}
	DIO_voidSetPinValue(EN_PORT,EN_PIN, GPIO_HIGH);
 80008c6:	2201      	movs	r2, #1
 80008c8:	210f      	movs	r1, #15
 80008ca:	2002      	movs	r0, #2
 80008cc:	f7ff fd2a 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(20);
 80008d0:	2014      	movs	r0, #20
 80008d2:	f000 f98f 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(EN_PORT,EN_PIN, GPIO_LOW);
 80008d6:	2200      	movs	r2, #0
 80008d8:	210f      	movs	r1, #15
 80008da:	2002      	movs	r0, #2
 80008dc:	f7ff fd22 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(EN_PORT,EN_PIN, DIO_HIGH);
	_delay_ms(5);

#endif

	DIO_voidSetPinValue(EN_PORT,EN_PIN, GPIO_LOW);
 80008e0:	2200      	movs	r2, #0
 80008e2:	210f      	movs	r1, #15
 80008e4:	2002      	movs	r0, #2
 80008e6:	f7ff fd1d 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 f982 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(EN_PORT,EN_PIN, GPIO_HIGH);
 80008f0:	2201      	movs	r2, #1
 80008f2:	210f      	movs	r1, #15
 80008f4:	2002      	movs	r0, #2
 80008f6:	f7ff fd15 	bl	8000324 <DIO_voidSetPinValue>
	return local_u8ErrorState;
 80008fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	08001188 	.word	0x08001188

08000908 <LCD_enuSendChar>:

/***********************************************************************************************************/
ES_t LCD_enuSendChar(u8 copy_u8Char)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	u8 local_LCD_PINS[8]={LCD_D0, LCD_D1, LCD_D2,LCD_D3,LCD_D4,LCD_D5,LCD_D6,LCD_D7};
 8000912:	4a37      	ldr	r2, [pc, #220]	; (80009f0 <LCD_enuSendChar+0xe8>)
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091c:	e883 0003 	stmia.w	r3, {r0, r1}

	DIO_voidSetPinValue(RS_PORT, RS_PIN, GPIO_HIGH);
 8000920:	2201      	movs	r2, #1
 8000922:	210d      	movs	r1, #13
 8000924:	2002      	movs	r0, #2
 8000926:	f7ff fcfd 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(RW_PORT, RW_PIN, GPIO_LOW);
 800092a:	2200      	movs	r2, #0
 800092c:	210e      	movs	r1, #14
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff fcf8 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(EN_PORT, EN_PIN, GPIO_LOW);
 8000934:	2200      	movs	r2, #0
 8000936:	210f      	movs	r1, #15
 8000938:	2002      	movs	r0, #2
 800093a:	f7ff fcf3 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(5);
 800093e:	2005      	movs	r0, #5
 8000940:	f000 f958 	bl	8000bf4 <_delay_ms>

#if LCD_MODE == BIT_4
	/*send 4 high bits*/
	for (int i=0;i<4;i++)
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	e015      	b.n	8000976 <LCD_enuSendChar+0x6e>
	{
		DIO_voidSetPinValue(LCD_Data_PORT,local_LCD_PINS[i+4], ((copy_u8Char>>(i+4) ) & 1) );
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3304      	adds	r3, #4
 800094e:	3318      	adds	r3, #24
 8000950:	443b      	add	r3, r7
 8000952:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8000956:	79fa      	ldrb	r2, [r7, #7]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3304      	adds	r3, #4
 800095c:	fa42 f303 	asr.w	r3, r2, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fcda 	bl	8000324 <DIO_voidSetPinValue>
	for (int i=0;i<4;i++)
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	3301      	adds	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	2b03      	cmp	r3, #3
 800097a:	dde6      	ble.n	800094a <LCD_enuSendChar+0x42>
	}

	/*Latch 1.high and low  2.set data  3.high and low */
	DIO_voidSetPinValue(EN_PORT,EN_PIN, GPIO_HIGH);
 800097c:	2201      	movs	r2, #1
 800097e:	210f      	movs	r1, #15
 8000980:	2002      	movs	r0, #2
 8000982:	f7ff fccf 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f000 f934 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(EN_PORT,EN_PIN, GPIO_LOW);
 800098c:	2200      	movs	r2, #0
 800098e:	210f      	movs	r1, #15
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fcc7 	bl	8000324 <DIO_voidSetPinValue>
	/*send 4 low bits*/
	for (int i=0;i<4;i++)
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	e014      	b.n	80009c6 <LCD_enuSendChar+0xbe>
	{
		DIO_voidSetPinValue(LCD_Data_PORT,local_LCD_PINS[i+4], ((copy_u8Char>>i ) & 1) );
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	3304      	adds	r3, #4
 80009a0:	3318      	adds	r3, #24
 80009a2:	443b      	add	r3, r7
 80009a4:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80009a8:	79fa      	ldrb	r2, [r7, #7]
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	fa42 f303 	asr.w	r3, r2, r3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	461a      	mov	r2, r3
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fcb2 	bl	8000324 <DIO_voidSetPinValue>
	for (int i=0;i<4;i++)
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	3301      	adds	r3, #1
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	dde7      	ble.n	800099c <LCD_enuSendChar+0x94>
	/*Latch 1.high and low  2.set data  3.high and low */
	DIO_voidSetPinValue(EN_PORT,EN_PIN, DIO_HIGH);
	_delay_ms(5);
#endif

	DIO_voidSetPinValue(EN_PORT,EN_PIN, GPIO_HIGH);
 80009cc:	2201      	movs	r2, #1
 80009ce:	210f      	movs	r1, #15
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff fca7 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(1);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f000 f90c 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(EN_PORT,EN_PIN, GPIO_LOW);
 80009dc:	2200      	movs	r2, #0
 80009de:	210f      	movs	r1, #15
 80009e0:	2002      	movs	r0, #2
 80009e2:	f7ff fc9f 	bl	8000324 <DIO_voidSetPinValue>

}
 80009e6:	bf00      	nop
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	08001188 	.word	0x08001188

080009f4 <LCD_enuSendString>:

/********************************************************************************************************************/
ES_t LCD_enuSendString(char * copy_u8Data)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

	for (int i=0;i<strlen(copy_u8Data);i++)
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	e012      	b.n	8000a28 <LCD_enuSendString+0x34>
	{
		if (i==16)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2b10      	cmp	r3, #16
 8000a06:	d102      	bne.n	8000a0e <LCD_enuSendString+0x1a>
		{
			LCD_enuSendCommand(NEXT_LINE);
 8000a08:	20c0      	movs	r0, #192	; 0xc0
 8000a0a:	f7ff fefb 	bl	8000804 <LCD_enuSendCommand>
		}
		LCD_enuSendChar(copy_u8Data[i]);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff76 	bl	8000908 <LCD_enuSendChar>
		_delay_ms(3);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f8e9 	bl	8000bf4 <_delay_ms>
	for (int i=0;i<strlen(copy_u8Data);i++)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff fba1 	bl	8000170 <strlen>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d8e5      	bhi.n	8000a02 <LCD_enuSendString+0xe>
	}

}
 8000a36:	bf00      	nop
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <LCD_enuClear>:
		LCD_enuSendChar(pattern[i]);
	}
}

ES_t LCD_enuClear(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	LCD_enuSendCommand(0x01);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fedd 	bl	8000804 <LCD_enuSendCommand>

	_delay_ms(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f000 f8d2 	bl	8000bf4 <_delay_ms>
}
 8000a50:	bf00      	nop
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <NVIC_voidInit>:




void		NVIC_voidInit()
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	#ifndef			SCB_AIRCR
		#define		SCB_BASE_ADD		(0xE000ED00)
		#define		SCB_AIRCR			*((u32 *)(SCB_BASE_ADD+0x0C))
	#endif

	SCB_AIRCR = NVIC_NUM_GRP_SUB;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <NVIC_voidInit+0x14>)
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <NVIC_voidInit+0x18>)
 8000a60:	601a      	str	r2, [r3, #0]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed0c 	.word	0xe000ed0c
 8000a70:	05fa0500 	.word	0x05fa0500

08000a74 <NVIC_voidEnablePerInt>:



void		NVIC_voidEnablePerInt(u8 IntNum)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	/*		Range Check			*/
	if(IntNum<32)
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b1f      	cmp	r3, #31
 8000a82:	d805      	bhi.n	8000a90 <NVIC_voidEnablePerInt+0x1c>
	{
		//SET_BIT(NVIC_ISER0,IntNum); Read Modify Write
		NVIC_ISER0 = (1 << IntNum) ; //write only
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2201      	movs	r2, #1
 8000a88:	409a      	lsls	r2, r3
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <NVIC_voidEnablePerInt+0x3c>)
 8000a8c:	601a      	str	r2, [r3, #0]
	{
		IntNum -= 32;
		NVIC_ISER1 = (1 << IntNum) ; //write only
	}

}
 8000a8e:	e00a      	b.n	8000aa6 <NVIC_voidEnablePerInt+0x32>
	}else if(IntNum<64)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b3f      	cmp	r3, #63	; 0x3f
 8000a94:	d807      	bhi.n	8000aa6 <NVIC_voidEnablePerInt+0x32>
		IntNum -= 32;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	3b20      	subs	r3, #32
 8000a9a:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1 << IntNum) ; //write only
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <NVIC_voidEnablePerInt+0x40>)
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000e104 	.word	0xe000e104

08000ab8 <RCC_enuSysClkInit>:
#include	"RCC_config.h"
#include	"RCC_private.h"


ES_t		RCC_enuSysClkInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
	ES_t local_enuErrorstate=ES_OK;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]

	// choose system clock from (HSI - HSE crystal - HSE RC- PLL)
#if SYS_CLOCK == RCC_HSI
	RCC_CR |= (1<<RCC_HSI_ON);
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <RCC_enuSysClkInit+0xa0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a24      	ldr	r2, [pc, #144]	; (8000b58 <RCC_enuSysClkInit+0xa0>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6013      	str	r3, [r2, #0]
	while(((RCC_CR>>RCC_HSI_RDY)&1)== 0); //wait till ready
 8000ace:	bf00      	nop
 8000ad0:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <RCC_enuSysClkInit+0xa0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	085b      	lsrs	r3, r3, #1
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f8      	beq.n	8000ad0 <RCC_enuSysClkInit+0x18>
	/*CHOOSE HSI AS SYS_CLOCK*/
	RCC_CFGR &= ~(1<<RCC_SW0);
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000ae4:	f023 0301 	bic.w	r3, r3, #1
 8000ae8:	6013      	str	r3, [r2, #0]
	RCC_CFGR &= ~(1<<RCC_SW1);
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000af0:	f023 0302 	bic.w	r3, r3, #2
 8000af4:	6013      	str	r3, [r2, #0]
	RCC_CR |= ((HSI_STEP_CORRECTION + 16 ) << RCC_HSI_TRIM0);
#endif

/********choosing output on MCO********/
#if   RCC_MCO_PIN == NO_CLOCK
	RCC_CFGR &= ~(1<<RCC_MCO_2);
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000afc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000b00:	6013      	str	r3, [r2, #0]

	// To enable or disable Clock security system
#if CSS_ON == ENABLE
	RCC_CR |= (1<<RCC_CSS_ON);
#elif CSS_ON == DISABLE
	RCC_CR &= ~(1<<RCC_CSS_ON);
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <RCC_enuSysClkInit+0xa0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <RCC_enuSysClkInit+0xa0>)
 8000b08:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000b0c:	6013      	str	r3, [r2, #0]
#endif

/************Choosing a prescaller for the ADC */

#if   RCC_ADC_PRESCALLER == RCC_PRESCALLER_2
	RCC_CFGR &= ~(1<<RCC_ADCPRE0);
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b18:	6013      	str	r3, [r2, #0]
	RCC_CFGR &= ~(1<<RCC_ADCPRE2);
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000b20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b24:	6013      	str	r3, [r2, #0]
	#error("ADC prescaller Configuration error")
#endif

/*************** Choosing a prescaller for the APB2 */
#if   RCC_APB2_PRESCALLER == RCC_PRESCALLER_0
	RCC_CFGR &= ~(1<<RCC_PPRE2_2);
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000b2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b30:	6013      	str	r3, [r2, #0]
	#error("Configuration error")
#endif

/********** Choosing a prescaller for the APB1 */
#if   RCC_APB1_PRESCALLER == RCC_PRESCALLER_0
	RCC_CFGR &= ~(1<<RCC_PPRE1_2);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b3c:	6013      	str	r3, [r2, #0]
#endif


/****** Choosing a prescaller for the AHB */
#if   RCC_APB1_PRESCALLER == RCC_PRESCALLER_0
	RCC_CFGR &= ~(1<<RCC_HPRE3);
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <RCC_enuSysClkInit+0xa4>)
 8000b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b48:	6013      	str	r3, [r2, #0]
	RCC_CFGR |=  (1<<RCC_HPRE3);
#else
	#error("Configuration error")
#endif

}
 8000b4a:	bf00      	nop
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40021004 	.word	0x40021004

08000b60 <RCC_enuEnablePerClk>:

ES_t		RCC_enuEnablePerClk(u8 BusId , u8 copy_u8PerID)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	460a      	mov	r2, r1
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	71bb      	strb	r3, [r7, #6]
	ES_t local_enuErrorstate = ES_NOK ;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
	/*		Range Check			*/
	if(copy_u8PerID <= 31)
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	2b1f      	cmp	r3, #31
 8000b78:	d82d      	bhi.n	8000bd6 <RCC_enuEnablePerClk+0x76>
	{
		switch(BusId)
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d01c      	beq.n	8000bba <RCC_enuEnablePerClk+0x5a>
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	dc25      	bgt.n	8000bd0 <RCC_enuEnablePerClk+0x70>
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d002      	beq.n	8000b8e <RCC_enuEnablePerClk+0x2e>
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d00b      	beq.n	8000ba4 <RCC_enuEnablePerClk+0x44>
 8000b8c:	e020      	b.n	8000bd0 <RCC_enuEnablePerClk+0x70>
		{
			case	RCC_AHB		:	RCC_AHBENR  |= (1<<copy_u8PerID);	break;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <RCC_enuEnablePerClk+0x88>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	79ba      	ldrb	r2, [r7, #6]
 8000b94:	2101      	movs	r1, #1
 8000b96:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <RCC_enuEnablePerClk+0x88>)
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e015      	b.n	8000bd0 <RCC_enuEnablePerClk+0x70>
			case	RCC_APB1	:	RCC_APB1ENR |= (1<<copy_u8PerID);	break;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <RCC_enuEnablePerClk+0x8c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	79ba      	ldrb	r2, [r7, #6]
 8000baa:	2101      	movs	r1, #1
 8000bac:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <RCC_enuEnablePerClk+0x8c>)
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	e00a      	b.n	8000bd0 <RCC_enuEnablePerClk+0x70>
			case	RCC_APB2	:	RCC_APB2ENR |= (1<<copy_u8PerID);	break;
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <RCC_enuEnablePerClk+0x90>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	79ba      	ldrb	r2, [r7, #6]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <RCC_enuEnablePerClk+0x90>)
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	bf00      	nop

		}
		local_enuErrorstate = ES_OK ;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e001      	b.n	8000bda <RCC_enuEnablePerClk+0x7a>
	}
	else
	{

		local_enuErrorstate = ES_OUT_OF_RANGE ;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	73fb      	strb	r3, [r7, #15]

	}

	return local_enuErrorstate ;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40021014 	.word	0x40021014
 8000bec:	4002101c 	.word	0x4002101c
 8000bf0:	40021018 	.word	0x40021018

08000bf4 <_delay_ms>:

#ifndef DELAY_H_
#define DELAY_H_

void _delay_ms(u32 ticks)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	u32 i;
	for( i = 0; i < (ticks*500) ; i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	e003      	b.n	8000c0a <_delay_ms+0x16>
			{
				asm("NOP");
 8000c02:	bf00      	nop
	for( i = 0; i < (ticks*500) ; i++)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	3301      	adds	r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c10:	fb02 f303 	mul.w	r3, r2, r3
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d3f3      	bcc.n	8000c02 <_delay_ms+0xe>
			}
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
	...

08000c28 <userLEDINT>:



void userLEDINT(void);
void userLEDINT(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0



	LCD_enuSendString("HiPedestrianWait!");
 8000c2c:	4876      	ldr	r0, [pc, #472]	; (8000e08 <userLEDINT+0x1e0>)
 8000c2e:	f7ff fee1 	bl	80009f4 <LCD_enuSendString>

	/*toggle yellow*/
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN12, GPIO_LOW);
 8000c32:	2200      	movs	r2, #0
 8000c34:	210c      	movs	r1, #12
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff fb74 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_HIGH);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	210d      	movs	r1, #13
 8000c40:	2001      	movs	r0, #1
 8000c42:	f7ff fb6f 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN14, GPIO_LOW);
 8000c46:	2200      	movs	r2, #0
 8000c48:	210e      	movs	r1, #14
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fb6a 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, GPIO_LOW);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2107      	movs	r1, #7
 8000c54:	2001      	movs	r0, #1
 8000c56:	f7ff fb65 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_HIGH);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fb60 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN9, GPIO_LOW);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2109      	movs	r1, #9
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff fb5b 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(500);
 8000c6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c72:	f7ff ffbf 	bl	8000bf4 <_delay_ms>

	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8000c76:	2200      	movs	r2, #0
 8000c78:	210d      	movs	r1, #13
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff fb52 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2108      	movs	r1, #8
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff fb4d 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(200);
 8000c8a:	20c8      	movs	r0, #200	; 0xc8
 8000c8c:	f7ff ffb2 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_HIGH);
 8000c90:	2201      	movs	r2, #1
 8000c92:	210d      	movs	r1, #13
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff fb45 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_HIGH);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2108      	movs	r1, #8
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff fb40 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(500);
 8000ca4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca8:	f7ff ffa4 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8000cac:	2200      	movs	r2, #0
 8000cae:	210d      	movs	r1, #13
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fb37 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2108      	movs	r1, #8
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f7ff fb32 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(200);
 8000cc0:	20c8      	movs	r0, #200	; 0xc8
 8000cc2:	f7ff ff97 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_HIGH);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	210d      	movs	r1, #13
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f7ff fb2a 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_HIGH);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2108      	movs	r1, #8
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fb25 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(500);
 8000cda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cde:	f7ff ff89 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	210d      	movs	r1, #13
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fb1c 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2108      	movs	r1, #8
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff fb17 	bl	8000324 <DIO_voidSetPinValue>


	/*ped green and car red*/
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN12, GPIO_LOW);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	210c      	movs	r1, #12
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f7ff fb12 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8000d00:	2200      	movs	r2, #0
 8000d02:	210d      	movs	r1, #13
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fb0d 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN14, GPIO_HIGH); // car red on
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	210e      	movs	r1, #14
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f7ff fb08 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, GPIO_HIGH); // ped green on
 8000d14:	2201      	movs	r2, #1
 8000d16:	2107      	movs	r1, #7
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f7ff fb03 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2108      	movs	r1, #8
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff fafe 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN9, GPIO_LOW);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2109      	movs	r1, #9
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff faf9 	bl	8000324 <DIO_voidSetPinValue>

	_delay_ms(1000);
 8000d32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d36:	f7ff ff5d 	bl	8000bf4 <_delay_ms>


	/*toggle yellow*/
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN12, GPIO_LOW);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	210c      	movs	r1, #12
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff faf0 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_HIGH);
 8000d44:	2201      	movs	r2, #1
 8000d46:	210d      	movs	r1, #13
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f7ff faeb 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN14, GPIO_LOW);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	210e      	movs	r1, #14
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff fae6 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, GPIO_LOW);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2107      	movs	r1, #7
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fae1 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_HIGH);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2108      	movs	r1, #8
 8000d66:	2001      	movs	r0, #1
 8000d68:	f7ff fadc 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN9, GPIO_LOW);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2109      	movs	r1, #9
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff fad7 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(500);
 8000d76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d7a:	f7ff ff3b 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	210d      	movs	r1, #13
 8000d82:	2001      	movs	r0, #1
 8000d84:	f7ff face 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2108      	movs	r1, #8
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff fac9 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(200);
 8000d92:	20c8      	movs	r0, #200	; 0xc8
 8000d94:	f7ff ff2e 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_HIGH);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	210d      	movs	r1, #13
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff fac1 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_HIGH);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2108      	movs	r1, #8
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff fabc 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(500);
 8000dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db0:	f7ff ff20 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8000db4:	2200      	movs	r2, #0
 8000db6:	210d      	movs	r1, #13
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff fab3 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff faae 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(200);
 8000dc8:	20c8      	movs	r0, #200	; 0xc8
 8000dca:	f7ff ff13 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_HIGH);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	210d      	movs	r1, #13
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff faa6 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_HIGH);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2108      	movs	r1, #8
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff faa1 	bl	8000324 <DIO_voidSetPinValue>
	_delay_ms(500);
 8000de2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de6:	f7ff ff05 	bl	8000bf4 <_delay_ms>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8000dea:	2200      	movs	r2, #0
 8000dec:	210d      	movs	r1, #13
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff fa98 	bl	8000324 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2108      	movs	r1, #8
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f7ff fa93 	bl	8000324 <DIO_voidSetPinValue>

	LCD_enuClear();
 8000dfe:	f7ff fe1f 	bl	8000a40 <LCD_enuClear>
	//while (((DIO_PORTA>>DIO_PIN0) & 1)==0); //busy wait until button is released
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	08001190 	.word	0x08001190

08000e0c <main>:


int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	/* clock init*/
	RCC_enuSysClkInit();
 8000e10:	f7ff fe52 	bl	8000ab8 <RCC_enuSysClkInit>

	/*Enable clock peri for IOPORTC */
	RCC_enuEnablePerClk(RCC_APB2, IOPC_PERIPHERAL);
 8000e14:	2104      	movs	r1, #4
 8000e16:	2002      	movs	r0, #2
 8000e18:	f7ff fea2 	bl	8000b60 <RCC_enuEnablePerClk>
	/*GPIOA*/
	RCC_enuEnablePerClk(RCC_APB2, IOPA_PERIPHERAL);
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f7ff fe9e 	bl	8000b60 <RCC_enuEnablePerClk>
	/*Enable clock peri for IOPORTB */
	RCC_enuEnablePerClk(RCC_APB2, IOPB_PERIPHERAL);
 8000e24:	2103      	movs	r1, #3
 8000e26:	2002      	movs	r0, #2
 8000e28:	f7ff fe9a 	bl	8000b60 <RCC_enuEnablePerClk>
	/*AFIO */
	RCC_enuEnablePerClk(RCC_APB2, AFIO_PERIPHERAL);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f7ff fe96 	bl	8000b60 <RCC_enuEnablePerClk>

	//cars leds on PORTB pins 12,13,14
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN12, GPIO_OUTPUT_10MHZ_PP);
 8000e34:	2201      	movs	r2, #1
 8000e36:	210c      	movs	r1, #12
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff f9a1 	bl	8000180 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN13, GPIO_OUTPUT_10MHZ_PP);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	210d      	movs	r1, #13
 8000e42:	2001      	movs	r0, #1
 8000e44:	f7ff f99c 	bl	8000180 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN14, GPIO_OUTPUT_10MHZ_PP);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	210e      	movs	r1, #14
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff f997 	bl	8000180 <DIO_voidSetPinDirection>
	//pedestrian leds on PORTB pins 7,8,9
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN7, GPIO_OUTPUT_10MHZ_PP);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2107      	movs	r1, #7
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff f992 	bl	8000180 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN8, GPIO_OUTPUT_10MHZ_PP);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2108      	movs	r1, #8
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff f98d 	bl	8000180 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN9, GPIO_OUTPUT_10MHZ_PP);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2109      	movs	r1, #9
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff f988 	bl	8000180 <DIO_voidSetPinDirection>

	//for switch PORTA pin0 as input
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN0, GPIO_INPUT_PULL_UP_DOWN);
 8000e70:	2208      	movs	r2, #8
 8000e72:	2100      	movs	r1, #0
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff f983 	bl	8000180 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_PORTA, DIO_PIN0, GPIO_HIGH);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff fa50 	bl	8000324 <DIO_voidSetPinValue>

	//Falling or rising edge interrupt
	EXTI_voidChangeSenseMode(EXTI0, FALLING_EDGE);
 8000e84:	2100      	movs	r1, #0
 8000e86:	2000      	movs	r0, #0
 8000e88:	f7ff fbe6 	bl	8000658 <EXTI_voidChangeSenseMode>

	/*call the setcallback function for INT*/
	EXTI_voidSetCallBack(userLEDINT, EXTI0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4890      	ldr	r0, [pc, #576]	; (80010d0 <main+0x2c4>)
 8000e90:	f7ff fc46 	bl	8000720 <EXTI_voidSetCallBack>

	/*INT Initialization*/
	NVIC_voidInit();
 8000e94:	f7ff fde0 	bl	8000a58 <NVIC_voidInit>

	NVIC_voidEnablePerInt(6); //6 di mn vector table for name of interrrupt
 8000e98:	2006      	movs	r0, #6
 8000e9a:	f7ff fdeb 	bl	8000a74 <NVIC_voidEnablePerInt>

	EXTI_voidInit(EXTI0, DIO_PORTA);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f7ff fa9f 	bl	80003e4 <EXTI_voidInit>

	EXTI_voidEnableInt(EXTI0);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fbc0 	bl	800062c <EXTI_voidEnableInt>

	LCD_enuInit();
 8000eac:	f7ff fc64 	bl	8000778 <LCD_enuInit>
	_delay_ms(50);
 8000eb0:	2032      	movs	r0, #50	; 0x32
 8000eb2:	f7ff fe9f 	bl	8000bf4 <_delay_ms>
//	SevSeg_voidInit();
//	SevSeg_voidStart();
	while (1)
	{

		LCD_enuClear();
 8000eb6:	f7ff fdc3 	bl	8000a40 <LCD_enuClear>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN12, GPIO_HIGH); //car green on
 8000eba:	2201      	movs	r2, #1
 8000ebc:	210c      	movs	r1, #12
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fa30 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	210d      	movs	r1, #13
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff fa2b 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN14, GPIO_LOW);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	210e      	movs	r1, #14
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff fa26 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, GPIO_LOW);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2107      	movs	r1, #7
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff fa21 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f7ff fa1c 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN9, GPIO_HIGH); //ped red on
 8000eec:	2201      	movs	r2, #1
 8000eee:	2109      	movs	r1, #9
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f7ff fa17 	bl	8000324 <DIO_voidSetPinValue>


		_delay_ms(800);
 8000ef6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000efa:	f7ff fe7b 	bl	8000bf4 <_delay_ms>


		/*toggle yellow*/
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN12, GPIO_LOW);
 8000efe:	2200      	movs	r2, #0
 8000f00:	210c      	movs	r1, #12
 8000f02:	2001      	movs	r0, #1
 8000f04:	f7ff fa0e 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_HIGH);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	210d      	movs	r1, #13
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f7ff fa09 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN14, GPIO_LOW);
 8000f12:	2200      	movs	r2, #0
 8000f14:	210e      	movs	r1, #14
 8000f16:	2001      	movs	r0, #1
 8000f18:	f7ff fa04 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, GPIO_LOW);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2107      	movs	r1, #7
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff f9ff 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_HIGH);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2108      	movs	r1, #8
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f7ff f9fa 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN9, GPIO_LOW);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2109      	movs	r1, #9
 8000f34:	2001      	movs	r0, #1
 8000f36:	f7ff f9f5 	bl	8000324 <DIO_voidSetPinValue>
		_delay_ms(300);
 8000f3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f3e:	f7ff fe59 	bl	8000bf4 <_delay_ms>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8000f42:	2200      	movs	r2, #0
 8000f44:	210d      	movs	r1, #13
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff f9ec 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2108      	movs	r1, #8
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff f9e7 	bl	8000324 <DIO_voidSetPinValue>
		_delay_ms(200);
 8000f56:	20c8      	movs	r0, #200	; 0xc8
 8000f58:	f7ff fe4c 	bl	8000bf4 <_delay_ms>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_HIGH);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	210d      	movs	r1, #13
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff f9df 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_HIGH);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2108      	movs	r1, #8
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f7ff f9da 	bl	8000324 <DIO_voidSetPinValue>
		_delay_ms(300);
 8000f70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f74:	f7ff fe3e 	bl	8000bf4 <_delay_ms>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	210d      	movs	r1, #13
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f7ff f9d1 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2108      	movs	r1, #8
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff f9cc 	bl	8000324 <DIO_voidSetPinValue>
		_delay_ms(200);
 8000f8c:	20c8      	movs	r0, #200	; 0xc8
 8000f8e:	f7ff fe31 	bl	8000bf4 <_delay_ms>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_HIGH);
 8000f92:	2201      	movs	r2, #1
 8000f94:	210d      	movs	r1, #13
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff f9c4 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_HIGH);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f7ff f9bf 	bl	8000324 <DIO_voidSetPinValue>
		_delay_ms(300);
 8000fa6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000faa:	f7ff fe23 	bl	8000bf4 <_delay_ms>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	210d      	movs	r1, #13
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff f9b6 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2108      	movs	r1, #8
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff f9b1 	bl	8000324 <DIO_voidSetPinValue>



		/*car red and green ped*/
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN12, GPIO_LOW);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	210c      	movs	r1, #12
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f7ff f9ac 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	210d      	movs	r1, #13
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f7ff f9a7 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN14, GPIO_HIGH); // car red on
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	210e      	movs	r1, #14
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff f9a2 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, GPIO_HIGH); // ped green on
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2107      	movs	r1, #7
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f7ff f99d 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2108      	movs	r1, #8
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff f998 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN9, GPIO_LOW);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2109      	movs	r1, #9
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff f993 	bl	8000324 <DIO_voidSetPinValue>

		_delay_ms(800);
 8000ffe:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001002:	f7ff fdf7 	bl	8000bf4 <_delay_ms>

		/*toggle yellow*/
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN12, GPIO_LOW);
 8001006:	2200      	movs	r2, #0
 8001008:	210c      	movs	r1, #12
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff f98a 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_HIGH);
 8001010:	2201      	movs	r2, #1
 8001012:	210d      	movs	r1, #13
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff f985 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN14, GPIO_LOW);
 800101a:	2200      	movs	r2, #0
 800101c:	210e      	movs	r1, #14
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff f980 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN7, GPIO_LOW);
 8001024:	2200      	movs	r2, #0
 8001026:	2107      	movs	r1, #7
 8001028:	2001      	movs	r0, #1
 800102a:	f7ff f97b 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_HIGH);
 800102e:	2201      	movs	r2, #1
 8001030:	2108      	movs	r1, #8
 8001032:	2001      	movs	r0, #1
 8001034:	f7ff f976 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN9, GPIO_LOW);
 8001038:	2200      	movs	r2, #0
 800103a:	2109      	movs	r1, #9
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff f971 	bl	8000324 <DIO_voidSetPinValue>
		_delay_ms(300);
 8001042:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001046:	f7ff fdd5 	bl	8000bf4 <_delay_ms>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 800104a:	2200      	movs	r2, #0
 800104c:	210d      	movs	r1, #13
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff f968 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 8001054:	2200      	movs	r2, #0
 8001056:	2108      	movs	r1, #8
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff f963 	bl	8000324 <DIO_voidSetPinValue>
		_delay_ms(200);
 800105e:	20c8      	movs	r0, #200	; 0xc8
 8001060:	f7ff fdc8 	bl	8000bf4 <_delay_ms>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_HIGH);
 8001064:	2201      	movs	r2, #1
 8001066:	210d      	movs	r1, #13
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff f95b 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_HIGH);
 800106e:	2201      	movs	r2, #1
 8001070:	2108      	movs	r1, #8
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff f956 	bl	8000324 <DIO_voidSetPinValue>
		_delay_ms(300);
 8001078:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800107c:	f7ff fdba 	bl	8000bf4 <_delay_ms>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 8001080:	2200      	movs	r2, #0
 8001082:	210d      	movs	r1, #13
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff f94d 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 800108a:	2200      	movs	r2, #0
 800108c:	2108      	movs	r1, #8
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff f948 	bl	8000324 <DIO_voidSetPinValue>
		_delay_ms(200);
 8001094:	20c8      	movs	r0, #200	; 0xc8
 8001096:	f7ff fdad 	bl	8000bf4 <_delay_ms>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_HIGH);
 800109a:	2201      	movs	r2, #1
 800109c:	210d      	movs	r1, #13
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff f940 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_HIGH);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2108      	movs	r1, #8
 80010a8:	2001      	movs	r0, #1
 80010aa:	f7ff f93b 	bl	8000324 <DIO_voidSetPinValue>
		_delay_ms(300);
 80010ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010b2:	f7ff fd9f 	bl	8000bf4 <_delay_ms>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN13, GPIO_LOW);
 80010b6:	2200      	movs	r2, #0
 80010b8:	210d      	movs	r1, #13
 80010ba:	2001      	movs	r0, #1
 80010bc:	f7ff f932 	bl	8000324 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, DIO_PIN8, GPIO_LOW);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff f92d 	bl	8000324 <DIO_voidSetPinValue>
		LCD_enuClear();
 80010ca:	f7ff fcb9 	bl	8000a40 <LCD_enuClear>
		LCD_enuClear();
 80010ce:	e6f2      	b.n	8000eb6 <main+0xaa>
 80010d0:	08000c29 	.word	0x08000c29

080010d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <LoopForever+0x6>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	; (8001114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <LoopForever+0xe>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	; (8001120 <LoopForever+0x16>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001102:	f000 f811 	bl	8001128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001106:	f7ff fe81 	bl	8000e0c <main>

0800110a <LoopForever>:

LoopForever:
  b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   r0, =_estack
 800110c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001118:	080011ac 	.word	0x080011ac
  ldr r2, =_sbss
 800111c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001120:	2000005c 	.word	0x2000005c

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <__libc_init_array>:
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	2600      	movs	r6, #0
 800112c:	4d0c      	ldr	r5, [pc, #48]	; (8001160 <__libc_init_array+0x38>)
 800112e:	4c0d      	ldr	r4, [pc, #52]	; (8001164 <__libc_init_array+0x3c>)
 8001130:	1b64      	subs	r4, r4, r5
 8001132:	10a4      	asrs	r4, r4, #2
 8001134:	42a6      	cmp	r6, r4
 8001136:	d109      	bne.n	800114c <__libc_init_array+0x24>
 8001138:	f000 f81a 	bl	8001170 <_init>
 800113c:	2600      	movs	r6, #0
 800113e:	4d0a      	ldr	r5, [pc, #40]	; (8001168 <__libc_init_array+0x40>)
 8001140:	4c0a      	ldr	r4, [pc, #40]	; (800116c <__libc_init_array+0x44>)
 8001142:	1b64      	subs	r4, r4, r5
 8001144:	10a4      	asrs	r4, r4, #2
 8001146:	42a6      	cmp	r6, r4
 8001148:	d105      	bne.n	8001156 <__libc_init_array+0x2e>
 800114a:	bd70      	pop	{r4, r5, r6, pc}
 800114c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001150:	4798      	blx	r3
 8001152:	3601      	adds	r6, #1
 8001154:	e7ee      	b.n	8001134 <__libc_init_array+0xc>
 8001156:	f855 3b04 	ldr.w	r3, [r5], #4
 800115a:	4798      	blx	r3
 800115c:	3601      	adds	r6, #1
 800115e:	e7f2      	b.n	8001146 <__libc_init_array+0x1e>
 8001160:	080011a4 	.word	0x080011a4
 8001164:	080011a4 	.word	0x080011a4
 8001168:	080011a4 	.word	0x080011a4
 800116c:	080011a8 	.word	0x080011a8

08001170 <_init>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	bf00      	nop
 8001174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001176:	bc08      	pop	{r3}
 8001178:	469e      	mov	lr, r3
 800117a:	4770      	bx	lr

0800117c <_fini>:
 800117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117e:	bf00      	nop
 8001180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001182:	bc08      	pop	{r3}
 8001184:	469e      	mov	lr, r3
 8001186:	4770      	bx	lr
